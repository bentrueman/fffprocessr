curve(sin, -2*pi, 2*pi, xname = "t")
?dnorm()
dnorm(seq(-2, 2, by = .1))
dnorm(seq(-2, 2, by = .01))
dnorm(seq(-3, 3, by = .01))
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
mod
mod$model
coef(mod$model)
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 4) ^ 2 / 2) + 2 * exp(-(x - 10 / 3) ^ 2 / 2) + rnorm(100, 0, .1)
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
coef(mod$model)
plot(x, y)
# two gaussian peaks:
y <- exp(-(x - 4) ^ 2 / 2) + 2 * exp(-(x - 10 / .5) ^ 2 / 2) + rnorm(100, 0, .1)
plot(x, y)
# two gaussian peaks:
y <- exp(-(x - 4) ^ 2 / 2) + .5 * exp(-(x - 10 / .5) ^ 2 / 2) + rnorm(100, 0, .1)
plot(x, y)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
plot(x, y)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + 2 * exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
plot(x, y)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + 2 * exp(-((x - 7) / 2) ^ 2 / 2) + rnorm(100, 0, .1)
plot(x, y)
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
coef(mod$model)
set.seed(0)
x <- seq(0, 10, length.out = 200)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + 2 * exp(-((x - 7) / 2) ^ 2 / 2) + rnorm(100, 0, .1)
plot(x, y)
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
coef(mod$model)
component
component <- function(h, mu, s) {
h * exp(-0.5 * ((x - mu) / s) ^ 2)
}
set.seed(0)
x <- seq(0, 10, length.out = 200)
# two gaussian peaks:
h1 <- 1
h2 <- 2
mu1 <- 3
mu2 <- 7
s1 <- 1
s2 <- 2
component <- function(h, mu, s) {
h * exp(-0.5 * ((x - mu) / s) ^ 2)
}
noise <- rnorm(100, 0, .1)
y <- component(h1, mu1, s1) + component(h1, mu1, s1) + noise
plot(x, y)
set.seed(0)
x <- seq(0, 10, length.out = 200)
# two gaussian peaks:
h1 <- 1
h2 <- 2
mu1 <- 3
mu2 <- 7
s1 <- 1
s2 <- 2
component <- function(h, mu, s) {
h * exp(-0.5 * ((x - mu) / s) ^ 2)
}
noise <- rnorm(100, 0, .1)
y <- component(h1, mu1, s1) + component(h2, mu2, s2) + noise
plot(x, y)
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
mod
coef(mod$model)
coef(mod$model) - c(h1, h2, mu1, mu2, s1, s2)
set.seed(0)
x <- seq(0, 10, length.out = 200)
# two gaussian peaks:
h1 <- 1
h2 <- 2
mu1 <- 3
mu2 <- 7
s1 <- 1
s2 <- 2
component <- function(h, mu, s) {
h * exp(-0.5 * ((x - mu) / s) ^ 2)
}
noise <- rnorm(100, 0, .1)
y <- component(h1, mu1, s1) + component(h2, mu2, s2) + noise
plot(x, y)
test_that("deconvolve_fff() fits the expected model", {
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
d <- coef(mod$model) - c(h1, h2, mu1, mu2, s1, s2)
expect_lt(max(abs(d)), .05)
})
set.seed(0)
x <- seq(0, 10, length.out = 200)
# two gaussian peaks:
h1 <- 1
h2 <- 2
mu1 <- 3
mu2 <- 7
s1 <- 1
s2 <- 2
component <- function(h, mu, s) {
h * exp(-0.5 * ((x - mu) / s) ^ 2)
}
noise <- rnorm(100, 0, .1)
y <- component(h1, mu1, s1) + component(h2, mu2, s2) + noise
plot(x, y)
test_that("deconvolve_fff() fits the expected model", {
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(4,4), s = c(1, 1), fn = "normal")
d <- coef(mod$model) - c(h1, h2, mu1, mu2, s1, s2)
expect_lt(max(abs(d)), .05)
})
set.seed(0)
x <- seq(0, 10, length.out = 200)
# two gaussian peaks:
h1 <- 1
h2 <- 2
mu1 <- 3
mu2 <- 7
s1 <- 1
s2 <- 2
component <- function(h, mu, s) {
h * exp(-0.5 * ((x - mu) / s) ^ 2)
}
noise <- rnorm(100, 0, .1)
y <- component(h1, mu1, s1) + component(h2, mu2, s2) + noise
plot(x, y)
test_that("deconvolve_fff() fits the expected model", {
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(2, 7), s = c(1, 1), fn = "normal")
d <- coef(mod$model) - c(h1, h2, mu1, mu2, s1, s2)
expect_lt(max(abs(d)), .05)
})
set.seed(0)
x <- seq(0, 10, length.out = 200)
# two gaussian peaks:
h1 <- 1
h2 <- 2
mu1 <- 3
mu2 <- 7
s1 <- 1
s2 <- 2
component <- function(h, mu, s) {
h * exp(-0.5 * ((x - mu) / s) ^ 2)
}
noise <- rnorm(100, 0, .1)
y <- component(h1, mu1, s1) + component(h2, mu2, s2) + noise
plot(x, y)
test_that("deconvolve_fff() fits the expected model", {
mod <- deconvolve_fff(x, y, h = c(1, 1), mu = c(2, 7), s = c(1, 1), fn = "normal")
d <- coef(mod$model) - c(h1, h2, mu1, mu2, s1, s2)
expect_lt(max(abs(d)), .05)
})
use_test("integrate_peak")
?integrate_peak
x <- seq(-2, 2, by = .1)
y <- dnorm(x)
integrate_peak(x, y)
x <- seq(-2, 2, by = .01)
y <- dnorm(x)
integrate_peak(x, y)
x <- seq(-2, 2, by = 1e-3)
y <- dnorm(x)
integrate_peak(x, y)
peak_fun
peak_fun <- function(bound) {
x <- seq(-bound, bound, by = 1e-3)
y <- dnorm(x)
integrate_peak(x, y)
}
peak_fun(2)
peak_fun(1)
peak_fun(3)
test_that("integrate_peak() yields expected sum", {
peak_fun <- function(bound) {
x <- seq(-bound, bound, by = 1e-3)
y <- dnorm(x)
integrate_peak(x, y)
}
expect_equal(peak_fun(1), 68.2, tolerance = .1)
})
(peak_fun(1)
peak_fun(1)
expect_equal(peak_fun(1), .682, tolerance = 1e-3)
expect_equal(peak_fun(1), .682, tolerance = 1e-2)
test_that("integrate_peak() yields expected sum", {
peak_fun <- function(bound) {
x <- seq(-bound, bound, by = 1e-3)
y <- dnorm(x)
integrate_peak(x, y)
}
expect_equal(peak_fun(1), .682, tolerance = 1e-2)
})
expect_equal(peak_fun(2), .954, tolerance = 1e-2)
expect_equal(peak_fun(3), .997, tolerance = 1e-2)
test_that("integrate_peak() yields expected sum", {
peak_fun <- function(bound) {
x <- seq(-bound, bound, by = 1e-3)
y <- dnorm(x)
integrate_peak(x, y)
}
expect_equal(peak_fun(1), .682, tolerance = 1e-2)
expect_equal(peak_fun(2), .954, tolerance = 1e-2)
expect_equal(peak_fun(3), .997, tolerance = 1e-2)
})
use_test("calculate_rh")
?calculate_rh
tr <- seq(11.6, 15.6, by = .1)
calculate_rh(tr)
tr <- seq(11.6, 15.6, by = .1)
calculate_rh(tr)
1.318561e-09 * 1e9
tr <- seq(11.6, 15.6, by = 1)
calculate_rh(tr)
test_that("multiplication works", {
tr <- seq(11.6, 15.6, by = 1)
ref <- c(1.055725e-11, 3.375582e-10, 6.645592e-10, 9.915602e-10, 1.318561e-09)
calculated <- calculate_rh(tr)
expect_equal(calculated, ref)
})
test_that("calculate_rh() yields the expected hydrodynamic radii", {
tr <- seq(11.6, 15.6, by = 1)
ref <- c(1.055725e-11, 3.375582e-10, 6.645592e-10, 9.915602e-10, 1.318561e-09)
calculated <- calculate_rh(tr)
expect_equal(calculated, ref)
})
?calibrate_mw
use_Test("calibrate_mw")
use_test("calibrate_mw")
retention <- c(11.35890, 19.49773, 19.24173, 13.88310, 18.73001, 17.67315)
mw_kda <- c(0.69, 2000.00, 440.00, 1.80, 158.00, 44.00)
# return tick positions for 1, 10, 100, and 1000 kDa,
# based on a quadratic calibration curve:
calibrate_mw(retention, mw_kda, newdata = c(1, 10, 100, 1000), predict = TRUE)
test_that("multiplication works", {
retention <- c(11.35890, 19.49773, 19.24173, 13.88310, 18.73001, 17.67315)
mw_kda <- c(0.69, 2000.00, 440.00, 1.80, 158.00, 44.00)
ref <- c(13.25712, 16.41176, 18.15480, 19.51300)
calculated <- calibrate_mw(retention, mw_kda, newdata = c(1, 10, 100, 1000), predict = TRUE)
expect_equal(ref, calculated)
})
test_that("multiplication works", {
retention <- c(11.35890, 19.49773, 19.24173, 13.88310, 18.73001, 17.67315)
mw_kda <- c(0.69, 2000.00, 440.00, 1.80, 158.00, 44.00)
ref <- c(13.257117, 16.411758, 18.154797, 19.513002)
calculated <- calibrate_mw(retention, mw_kda, newdata = c(1, 10, 100, 1000), predict = TRUE)
expect_equal(ref, calculated)
})
test_that("calibrate_mw() yields the expected retention times", {
retention <- c(11.35890, 19.49773, 19.24173, 13.88310, 18.73001, 17.67315)
mw_kda <- c(0.69, 2000.00, 440.00, 1.80, 158.00, 44.00)
ref <- c(13.257117, 16.411758, 18.154797, 19.513002)
calculated <- calibrate_mw(retention, mw_kda, newdata = c(1, 10, 100, 1000), predict = TRUE)
expect_equal(ref, calculated)
})
check()
test_coverage()
library(devtools)
use_r("calculate_w")
use_test("calculate_w")
use_r("calculate_rh")
chamber_dims <- data.frame(
L = 27.75, # channel length (cm) (measured)
# next three params defined in https://doi.org/10.1016/j.chroma.2018.04.056
b1 = 2, # cm (measured)
b2 = .5, # cm (measured)
z1 = 3.4 # cm (measured)
)
chamber_dims
chamber_dims <- list(
L = 27.75, # channel length (cm) (measured)
# next three params defined in https://doi.org/10.1016/j.chroma.2018.04.056
b1 = 2, # cm (measured)
b2 = .5, # cm (measured)
z1 = 3.4 # cm (measured)
)
chamber_dims
document()
?calculate_rh
fffprocessr:::chamber_dims
load_all()
fffprocessr:::chamber_dims
fffprocessr:::mals_calib
# generate internal data for functions:
library("tidyverse")
mals_calib <- tibble::tribble(
~number, ~theta, ~coefficient,
1,      7,  0.00178775,
2,     12, 0.00368763,
3,     20,  0.00271051,
4,     28,  0.00176462,
5,     36,  0.00231833,
6,     44,  0.00152087,
7,     52,  0.00185855,
8,     60,  0.00194345,
9,     68,  0.00194282,
10,    76,  0.00206297,
11,    84,  0.00215706,
12,    90,  0.00248170,
13,   100,  0.00213770,
14,   108,  0.00192152,
15,   116,  0.00199917,
16,   124,  0.00181977,
17,   132,  0.00161909,
18,   140,  0.00135980,
19,   148,  0.00175342,
20,   156,  0.00158798,
21,   164,  0.00202189
)
chamber_dims <- list(
L = 27.75, # channel length (cm) (measured)
# next three params defined in https://doi.org/10.1016/j.chroma.2018.04.056
b1 = 2, # cm (measured)
b2 = .5, # cm (measured)
z1 = 3.4 # cm (measured)
)
usethis::use_data(mals_calib, chamber_dims, internal = TRUE)
# generate internal data for functions:
library("tidyverse")
mals_calib <- tibble::tribble(
~number, ~theta, ~coefficient,
1,      7,  0.00178775,
2,     12, 0.00368763,
3,     20,  0.00271051,
4,     28,  0.00176462,
5,     36,  0.00231833,
6,     44,  0.00152087,
7,     52,  0.00185855,
8,     60,  0.00194345,
9,     68,  0.00194282,
10,    76,  0.00206297,
11,    84,  0.00215706,
12,    90,  0.00248170,
13,   100,  0.00213770,
14,   108,  0.00192152,
15,   116,  0.00199917,
16,   124,  0.00181977,
17,   132,  0.00161909,
18,   140,  0.00135980,
19,   148,  0.00175342,
20,   156,  0.00158798,
21,   164,  0.00202189
)
chamber_dims <- list(
L = 27.75, # channel length (cm) (measured)
# next three params defined in https://doi.org/10.1016/j.chroma.2018.04.056
b1 = 2, # cm (measured)
b2 = .5, # cm (measured)
z1 = 3.4 # cm (measured)
)
usethis::use_data(mals_calib, chamber_dims, internal = TRUE, overwrite = TRUE)
fffprocessr:::chamber_dims
load_all()
fffprocessr:::chamber_dims
documnet()
document()
load_all()
?calculate_w
calculate_w(t1 = 21.2, D = .35e-10, Vc = .0015, Vin = 2e-4)
1e6 * calculate_w(t1 = 21.2, D = .35e-10, Vc = .0015, Vin = 2e-4)
test_that("calculate_w() returns the expect channel thickness.", {
expect_equal(calculate_w(t1 = 21.2, D = .35e-10, Vc = .0015, Vin = 2e-4), 0.0003816631)
})
test_that("calculate_w() returns the expect channel thickness.", {
expect_equal(calculate_w(t1 = 21.2, D = .35e-10, Vc = .0015, Vin = 2e-4), 0.00038166305)
})
calculate_w(t1 = 21.2, D = .35e-10, Vc = .0015, Vin = 2e-4)
calculate_w(t1 = 21.2, D = .35e-10, Vc = .0015, Vin = 2e-4)
document()
check()
use_r("load_mals")
use_r("calculate_rg")
document()
use_r("load_mals")
test_active_file()
use_r("calculate_rg")
test_active_file()
test()
use_r("load_direct_quant")
use_test("load_direct_quant")
path <- system.file("extdata", package = "fffprocessr")
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE)
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN")
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file")
file <- load_direct_quant(path = paste0(path, "/direct_quantification"))
file
path = paste0(path, "/direct_quantification")
path
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN")
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param")
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param") %>%
transmute(
date = str_extract(.data$file, "\\d{4}-\\d{2}-\\d{2}") %>%
as.Date(),
sample = .data$Label,
value = str_remove(.data$value, ",") %>% as.numeric(),
param = str_extract(.data$param, "\\d+[A-Z][a-z]?")
)
document()
test_that("load_direct_quant() yields correct concentrations", {
path <- system.file("extdata", package = "fffprocessr")
file <- load_direct_quant(path = paste0(path, "/direct_quantification"))
expect_equal(mean(file$value, na.rm = TRUE), 660.61344)
})
load_all()
test_that("load_direct_quant() yields correct concentrations", {
path <- system.file("extdata", package = "fffprocessr")
file <- load_direct_quant(path = paste0(path, "/direct_quantification"))
expect_equal(mean(file$value, na.rm = TRUE), 660.61344)
})
path
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param") %>%
filter(!.data$param %in% int_stds)
int_stds = c("45Sc", "115In", "159Tb")
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param") %>%
filter(!.data$param %in% int_stds)
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param") %>%
filter(.data$param %in% int_stds)
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param") %>% distinct(param)
paste(int_stds, collapse = "|")
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param") %>%
filter(!str_detect(.data$param, paste(int_stds, collapse = "|"))
path %>%
list.files(pattern = "\\.xlsx$", full.names = TRUE) %>%
set_names() %>%
map_dfr(read_excel, .id = "file") %>%
filter(.data$`Sample Type` == "UNKNOWN") %>%
pivot_longer(matches("^\\d"), names_to = "param") %>%
filter(!str_detect(.data$param, paste(int_stds, collapse = "|")))
document()
test_that("load_direct_quant() yields correct concentrations", {
path <- system.file("extdata", package = "fffprocessr")
file <- load_direct_quant(path = paste0(path, "/direct_quantification"))
expect_equal(mean(file$value, na.rm = TRUE), 660.61344)
})
check()
build_readme()
documnet()
document()
?calculate_w
test_active_file()
build_readme()
build_readme()
library(devtools)
use_r("load_icp")
document()
check()
use_test("load_icp")
?data.frame
?left_join
?dplyr::left_join
library(devtools)
install.packages("devtools")
library(devtools)
use_r("load_icp")
document()

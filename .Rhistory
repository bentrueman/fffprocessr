tibble::as_tibble(.name_repair = "minimal")
angles %>%
matrix(byrow = TRUE, nrow = 7) %>%
tibble::as_tibble(.name_repair = "unique")
angles %>%
matrix(byrow = TRUE, nrow = 7)
angles %>%
matrix(byrow = TRUE, nrow = 7) %>%
tibble::as_tibble()
angles %>%
matrix(byrow = TRUE, nrow = 7) %>%
tibble::as_tibble() %>%
dplyr::rename_all(stringr::str_to_lower)
angles %>%
matrix(byrow = TRUE, nrow = 7) %>%
tibble::as_tibble(.name_repair = "unique") %>%
dplyr::rename_all(stringr::str_to_lower)
angles %>%
matrix(byrow = TRUE, nrow = 7) %>%
tibble::as_tibble(.name_repair = "unique") %>%
dplyr::rename_all(~ stringr::str_extract(.x, "\\d+"))
angles %>%
matrix(byrow = TRUE, nrow = 7) %>%
tibble::as_tibble(.name_repair = "unique") %>%
dplyr::rename_all(~ stringr::str_extract(.x, "\\d+") %>% paste0("v", .))
colnames()
?colnames()
suppressMessages(tibble::as_tibble((matrix(byrow = TRUE, nrow = 7))))
suppressMessages(tibble::as_tibble((matrix(angles, byrow = TRUE, nrow = 7))))
uppressMessages(
tibble::as_tibble(matrix(angles, byrow = TRUE, nrow = 7)))
suppressMessages(
tibble::as_tibble(matrix(angles, byrow = TRUE, nrow = 7)))
suppressMessages(
tibble::as_tibble(matrix(angles, byrow = TRUE, nrow = 7), .name_repair = "unique")
)
suppressMessages(
tibble::as_tibble(matrix(angles, byrow = TRUE, nrow = 7), .name_repair = "unique")
) %>%
dplyr::rename_all(~ stringr::str_extract(.x, "\\d+") %>% paste0("v", .))
document()
check()
document()
yse_r("calculate_rg")
use_r("calculate_rg")
document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
dpi = 600
)
library("fffprocessr")
library("tidyverse")
theme_set(theme_classic() + theme(strip.background = element_blank()))
icp_data <- system.file("extdata", package = "fffprocessr") %>%
load_icp(calibrate = TRUE)
icp_data
uv_data <- system.file("extdata", package = "fffprocessr") %>%
load_uv(UV254_1, UV254_2, LS90) # name channels in order from left to right
uv_data
data <- combine_fff(
icp_data,
uv_data,
subtract_blank = TRUE,
focus = 10
) %>%
correct_baseline(left = 10, right = 35)
# load a calibration curve:
mw_data <- system.file("extdata/mw_calibration", package = "fffprocessr") %>%
list.files(full.names = TRUE) %>%
read_csv()
mw_data %>%
with(calibrate_mw(peak_retention_time, mw_kda, type = "quadratic", predict = FALSE))
mw_data %>%
with(
calibrate_mw(
peak_retention_time,
mw_kda,
type = "quadratic", # or "linear"
newdata = c(1, 10, 100, 1000), # molecular weights (or time if output = "mw")
output = "time", # or "mw"
predict = TRUE
)
)
data %>%
filter(time > 5, time < 37.5, param != "UV254_1") %>%
mutate(
param = fct_recode(param, "UV254" = "UV254_2"),
param = str_remove(param, "^\\d+") %>%
str_replace("([:alpha:]+)(\\d+)$", "\\1[\\2]")
) %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param), scales = "free_y", ncol = 2, labeller = label_parsed) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
geom_line() +
scale_colour_manual(values = c("firebrick", "grey")) +
theme(legend.position = "bottom") +
labs(x = "Retention time (min.)", y = "Detector response", col = NULL)
knitr::include_graphics("man/figures/CodeCogsEqn_1.png", dpi = 500)
knitr::include_graphics("man/figures/CodeCogsEqn_3.png", dpi = 500)
deconvolved <- data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>%
mutate(
model = map(
data,
~ deconvolve_fff(
.x$time, .x$conc,
# these are the initial guesses for the model parameters
h = c(.8, .6, .2), mu = c(11, 14, 20), s = c(1, 1, 1), g = c(1, 2, 5),
fn = "skew_gaussian"
)
),
fitted = map(model, "fitted"),
peaks = map(model, "peaks")
)
deconvolved %>%
unnest(c(data, fitted, peaks)) %>%
pivot_longer(c(conc, fitted, starts_with("peak"))) %>%
ggplot(aes(time, value, col = name, size = name)) +
facet_wrap(vars(sample)) +
scale_colour_manual(
values = c("black", "firebrick", "grey", "grey", "grey"),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
scale_size_manual(
values = c(1, 2, .5, .5, .5),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
geom_line() +
labs(x = "Retention time (min.)", y = "[Cu] (µg/L)", col = NULL, size = NULL)
deconvolved_emg <- data %>%
filter(param == "56Fe", time > 10, sample == "sample_bennery_raw") %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>%
mutate(
model = map(
data,
~ deconvolve_fff(
.x$time, .x$conc,
# these are the initial guesses for the model parameters
h = c(35, 50, 8), mu = c(14, 20, 28), s = c(1, 1, 1), g = c(1, 1, .5),
fn = "emg"
)
),
fitted = map(model, "fitted"),
peaks = map(model, "peaks")
)
deconvolved_emg %>%
unnest(c(data, fitted, peaks)) %>%
pivot_longer(c(conc, fitted, starts_with("peak"))) %>%
ggplot(aes(time, value, col = name, size = name)) +
scale_colour_manual(
values = c("black", "firebrick", "grey", "grey", "grey"),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
scale_size_manual(
values = c(1, 1, .5, .5, .5),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
geom_line() +
labs(x = "Retention time (min.)", y = "[Fe] (µg/L)", col = NULL, size = NULL)
deconvolved %>%
unnest(c(data, starts_with("peak"))) %>%
pivot_longer(starts_with("peak"), names_to = "peak") %>%
group_by(date, sample, param, peak) %>%
summarize(conc_ppb = integrate_peak(time, value, injvol = 0.001, flowrate = 0.001))
mals <- system.file("extdata/mals", package = "fffprocessr") %>%
load_mals() %>%
correct_baseline(4, 65)
mals %>%
mutate(param = str_to_upper(param) %>% str_replace("([:alpha:]+)(\\d+)$", "\\1[\\2]")) %>%
ggplot(aes(time, conc)) +
facet_wrap(
vars(fct_reorder(param, str_extract(param, "\\d+") %>% as.numeric())),
scales = "free_y", labeller = label_parsed
) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
geom_line() +
labs(x = "Retention time (min.)", y = "Detector response", col = NULL)
knitr::include_graphics("man/figures/CodeCogsEqn.png", dpi = 500)
knitr::include_graphics("man/figures/CodeCogsEqn_2.png", dpi = 500)
mals_rg <- mals %>%
filter(
time > 10,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "zimm")
mals_rg %>%
filter(param == "ls90") %>%
pivot_longer(c(rg_zimm, conc)) %>%
mutate(name = fct_recode(name, "LS[90]" = "conc", "r[g]~(nm)" = "rg_zimm")) %>%
ggplot(aes(time, value)) +
facet_wrap(vars(name), scales = "free_y", ncol = 2, labeller = label_parsed) +
geom_point(data = function(x) filter(x, name == "r[g]~(nm)", time < 60), alpha = .2, shape = 16) +
geom_line(data = function(x) filter(x, name == "LS[90]")) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
labs(x = "Retention time (min.)", y = NULL, col = NULL)
mals_rg %>%
filter(timeslice %in% c(17.1, 24.1, 40)) %>%
distinct(timeslice, rg_zimm) %>%
mutate(d_geom = 2 * rg_zimm / sqrt(3/5))
mals_rg %>%
filter(timeslice %in% c(17.1, 24.1, 40)) %>%
mutate(timeslice = paste(timeslice, "min.")) %>%
ggplot(aes(x, y)) +
facet_wrap(vars(timeslice), scales = "free_y") +
geom_smooth(method = "lm") +
geom_point() +
labs(x = expression("sin"^2*"("*theta*"/2)"), y = "1/R")
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
data %>%
filter(param == "65Cu", time > 10.5, time < 16) %>%
mutate(dh = 2 * 1e9 * calculate_rh(time) ) %>%
ggplot(aes(dh, conc, col = sample)) +
geom_line() +
scale_colour_manual(values = c("firebrick", "grey")) +
labs(x = "Calculated hydrodynamic diameter (nm)", y = "[Cu] (µg/L)", col = NULL)
load_all()
mals %>%
filter(
time > 10,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "zimm")
devtools::build_readme()
devtools::build_readme()
document()
check()
load_all()
calculate_rg
mals <- system.file("extdata/mals", package = "fffprocessr") %>%
load_mals() %>%
correct_baseline(4, 65)
mals
mals_rg <- mals %>%
filter(
time > 10,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "zimm")
devtools::build_readme()
use_r("calculate_rg")
document()
load_all()
?calculate_rg
calculate_rg
check()
use_r("load_icp")
use_r("calculate_rg")
document()
check()
use_r("combine_fff")
document()
check()
document()
devtools::build_readme()
check()
use_r("correct_baseline")
document()
check()
document()
check()
use_r("deconvolve_fff")
document()
check()
use_r("load_icp")
document()
check()
use_r("load_mals")
?tibble()
document()
check()
document9
document()
check()
document()
check()
devtools::build_readme()
load_all()
library(devtools)
load_all()
icp_data <- system.file("extdata", package = "fffprocessr") %>%
load_icp(calibrate = TRUE)
icp_data
uv_data <- system.file("extdata", package = "fffprocessr") %>%
load_uv(UV254_1, UV254_2, LS90) # name channels in order from left to right
uv_data
data <- combine_fff(
icp_data,
uv_data,
subtract_blank = TRUE,
focus = 10
) %>%
correct_baseline(left = 10, right = 35)
# load a calibration curve:
mw_data <- system.file("extdata/mw_calibration", package = "fffprocessr") %>%
list.files(full.names = TRUE) %>%
read_csv()
library("tidyverse")
# load a calibration curve:
mw_data <- system.file("extdata/mw_calibration", package = "fffprocessr") %>%
list.files(full.names = TRUE) %>%
read_csv()
mw_data %>%
with(calibrate_mw(peak_retention_time, mw_kda, type = "quadratic", predict = FALSE))
mw_data %>%
with(
calibrate_mw(
peak_retention_time,
mw_kda,
type = "quadratic", # or "linear"
newdata = c(1, 10, 100, 1000), # molecular weights (or time if output = "mw")
output = "time", # or "mw"
predict = TRUE
)
)
data %>%
filter(time > 5, time < 37.5) %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param), scales = "free_y", ncol = 2) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
geom_line()
data %>%
filter(time > 5, time < 37.5, param != "UV254_1") %>%
mutate(
param = fct_recode(param, "UV254" = "UV254_2"),
param = str_remove(param, "^\\d+") %>%
str_replace("([:alpha:]+)(\\d+)$", "\\1[\\2]")
) %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param), scales = "free_y", ncol = 2, labeller = label_parsed) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
geom_line() +
scale_colour_manual(values = c("firebrick", "grey")) +
theme(legend.position = "bottom") +
labs(x = "Retention time (min.)", y = "Detector response", col = NULL)
deconvolved <- data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>%
mutate(
model = map(
data,
~ deconvolve_fff(
.x$time, .x$conc,
# these are the initial guesses for the model parameters
h = c(.8, .6, .2), mu = c(11, 14, 20), s = c(1, 1, 1), g = c(1, 2, 5),
fn = "skew_gaussian"
)
),
fitted = map(model, "fitted"),
peaks = map(model, "peaks")
)
use_r("deconvolve_fff")
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>%
mutate(
model = map(
data,
~ deconvolve_fff(
.x$time, .x$conc,
# these are the initial guesses for the model parameters
h = c(.8, .6, .2), mu = c(11, 14, 20), s = c(1, 1, 1), g = c(1, 2, 5),
fn = "skew_gaussian"
)
),
fitted = map(model, "fitted"),
peaks = map(model, "peaks")
)
rlang::last_error()
document()
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup()
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>%
mutate(
model = map(
data,
~ deconvolve_fff(
.x$time, .x$conc,
# these are the initial guesses for the model parameters
h = c(.8, .6, .2), mu = c(11, 14, 20), s = c(1, 1, 1), g = c(1, 2, 5),
fn = "skew_gaussian"
)
),
fitted = map(model, "fitted"),
peaks = map(model, "peaks")
)
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup()
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>% slice(1)
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>% slice(1) %>% unnest(data)
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>% slice(1) %>% unnest(data) %>% pull(time) -> x
data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>% slice(1) %>% unnest(data) %>% pull(conc) -> y
data
h = c(.8, .6, .2); mu = c(11, 14, 20); s = c(1, 1, 1); g = c(1, 2, 5);
fn = "skew_gaussian"
algorithm = "port";
iter = 300; tol = 1e-1
peaks <- list(h, mu, s, g) %>%
purrr::map_dbl(length) %>%
unique()
peaks
if(length(peaks) > 1) stop("h, mu, s, and g must be equal in length.")
if(fn != "skew_gaussian" & fn != "emg") stop("specify a valid function (emg or skew_gaussian).")
# error function, used in skew_gaussian:
error_fun <- function(x) {
2 * stats::pnorm(x * sqrt(2)) - 1
}
# complementary error function:
erfc <- function(x) {
1 - error_fun(x)
}
# for nls formula:
skew_gaussian <- function(x, h, mu, s, g) {
h * exp(-(x - mu) ^ 2 / (2 * s ^ 2)) * (1 + error_fun(g * (x - mu) / (sqrt(2) * s)))
}
emg <- function(x, h, mu, s, g) {
(h * s / g) * sqrt(pi / 2) * exp(.5 * (s / g) ^ 2 - (x - mu) / g) *
erfc((1/ sqrt(2)) * (s / g - (x - mu) / s))
}
# for component peaks in output:
component_peaks <- function(x, coefs, peak = 1) {
coefs <- as.list(coefs[stringr::str_detect(names(coefs), as.character(peak))])
if(fn == "skew_gaussian") {
skew_gaussian(x, coefs$h, coefs$mu, coefs$s, coefs$g)
} else if(fn == "emg") {
emg(x, coefs$h, coefs$mu, coefs$s, coefs$g)
}
}
inputs <- c("h", "mu", "s", "g")
c_inputs <- function(input, number) paste(c("x", paste0(input, number)), collapse = ", ")
rename_inputs <- function(x) {
names(x) <- paste0(deparse(substitute(x)), seq_len(length(x)))
x
}
start_vals <- as.list(c(rename_inputs(h), rename_inputs(mu), rename_inputs(s), rename_inputs(g)))
formula <- stats::reformulate(
termlabels = purrr::map_chr(seq_len(peaks), ~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")),
response = "y"
)
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
coefs <- stats::coef(model)
peaks <- purrr::map(seq_len(peaks), ~ component_peaks(x, coefs, peak = .x))
peaks <- rlang::set_names(nm = paste0("peak", seq_len(length(peaks)))) %>%
dplyr::bind_cols()
paste0("peak", seq_len(length(peaks)))
rlang::set_names(nm = paste0("peak", seq_len(length(peaks))))
paste0("peak", seq_len(length(peaks)))
paste0("peak", seq_len(length(peaks))) %>% length()
peaks <- rlang::set_names(peaks, nm = paste0("peak", seq_len(length(peaks)))) %>%
dplyr::bind_cols()
peaks
peaks %>% ggplot(aes(time(peak1), peak1))
peaks %>% ggplot(aes(time(peak1), peak1)) + geom_line()
peaks %>% ggplot(aes(time(peak1), peak2)) + geom_line()
peaks %>% ggplot(aes(time(peak1), peak3)) + geom_line()
peaks %>% pivot_logner(everything()) %>% ggplot(aes(time(name), value)) + geom_line()
peaks %>% pivot_longer(everything()) %>% ggplot(aes(time(name), value)) + geom_line()
peaks %>% pivot_longer(everything())
peaks %>% pivot_longer(everything()) %>% ggplot(aes(time(name), value, col = name)) + geom_line()
document()
check()
build_readme()

time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 3) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 4) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 2) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 1) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
stats::lm(rayleigh_ratio ~ poly(x, order, raw = TRUE), data = .x)
document()
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 1) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 2) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 3) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 4) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 5) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
document()
rmarkdown::render("README.Rmd", "md_document")
check()
?calculate_rg
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
mals_corr <- correct_baseline(mals_data, 4, 65)
rg <- calculate_rg(mals_corr, method = "watt")
rg
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
rg$rg_watt[rg$timeslice == 40]
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
rg$rg_watt[rg$timeslice == 40]
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
test_that("calculate_rg() returns expected results.", {
rg <- calculate_rg(mals_data)
expect_equal(range(rg$rg_zimm), c(29.833372, 85.880589))
})
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.1861)
})
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7" & mals_corr$time > 39, ]
rg <- calculate_rg(mals_corr, method = "watt")
rg$rg_watt[rg$timeslice == 40]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
rg$rg_watt[rg$timeslice == 40]
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
library(devtools)
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
library(testthat)
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
unique(rg$rg_watt[rg$timeslice == 40])
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(unique(rg$rg_watt[rg$timeslice == 40]), 135.2001)
})
unique(rg$rg_watt[rg$timeslice == 40])
rg <- calculate_rg(mals_corr, method = "watt")
unique(rg$rg_watt[rg$timeslice == 40])
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(unique(rg$rg_watt[rg$timeslice == 40]), 135.1861)
})
expect_equal(round(unique(rg$rg_watt[rg$timeslice == 40]), 4), 135.1861)
rg_40 <- rg$rg_watt[rg$timeslice == 40]
expect_equal(round(unique(rg_40), 4), 135.1861)
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
rg_40 <- rg$rg_watt[rg$timeslice == 40]
expect_equal(round(unique(rg_40), 4), 135.1861)
})
check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
dpi = 600
)
# rmarkdown::render("README.Rmd", "md_document")
library("fffprocessr")
library("tidyverse")
theme_set(theme_classic() + theme(strip.background = element_blank()))
icp_data <- system.file("extdata", package = "fffprocessr") %>%
load_icp(calibrate = TRUE)
icp_data
uv_data <- system.file("extdata", package = "fffprocessr") %>%
load_uv(UV254_1, UV254_2, LS90) # name channels in order from left to right
uv_data
data <- combine_fff(
icp_data,
uv_data,
subtract_blank = TRUE,
focus = 10
) %>%
correct_baseline(left = 10, right = 35)
data <- combine_fff(
icp_data,
uv_data,
subtract_blank = TRUE,
focus = 10
)
data %>%
ggplot(aes(time, conc, col = sample())) +
facet_wrap(vars(element)) +
geom_line()
data %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(element)) +
geom_line()
data
data %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param)) +
geom_line()
data %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param), scales = "free_Y") +
geom_line()
data %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param), scales = "free_y") +
geom_line()
data <- combine_fff(
icp_data,
uv_data,
subtract_blank = TRUE,
focus = 10
) %>%
correct_baseline(left = 10, right = 35)
data %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param), scales = "free_y") +
geom_line()
data
data %>% distinct(param, three_sigma)
?integrate_peak
data %>%
group_by(param, sample) %>%
summarize(area = integrate_peak(time, conc, injvol = 5e4))
1.44e- 6
data %>%
filter(time > 10) %>%
group_by(param, sample) %>%
summarize(area = integrate_peak(time, conc, injvol = 5e4))
?integrate_peak
data %>%
filter(time > 10) %>%
group_by(sample, param) %>%
summarize(conc_ppb = integrate_peak(time, conc))
data %>%
filter(
time > 10,
param %in% c("55Mn", "56Fe")
) %>%
group_by(sample, param) %>%
summarize(conc_ppb = integrate_peak(time, conc))
data %>%
filter(
time > 10, # exclude the focus period
param %in% c("55Mn", "56Fe") # select parameters of interest
) %>%
group_by(sample, param) %>%
summarize(conc_ppb = integrate_peak(time, conc))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%",
dpi = 600
)
# rmarkdown::render("README.Rmd", "md_document")
library("fffprocessr")
library("tidyverse")
theme_set(theme_classic() + theme(strip.background = element_blank()))
icp_data <- system.file("extdata", package = "fffprocessr") %>%
load_icp(calibrate = TRUE)
icp_data
uv_data <- system.file("extdata", package = "fffprocessr") %>%
load_uv(UV254_1, UV254_2, LS90) # name channels in order from left to right
uv_data
data <- combine_fff(
icp_data,
uv_data,
subtract_blank = TRUE,
focus = 10
) %>%
correct_baseline(left = 10, right = 35)
data %>%
filter(
time > 10, # exclude the focus period
param %in% c("55Mn", "56Fe") # select parameters of interest
) %>%
group_by(sample, param) %>%
summarize(conc_ppb = integrate_peak(time, conc))
data %>%
filter(time > 5, time < 37.5, param != "UV254_1") %>%
mutate(
param = fct_recode(param, "UV254" = "UV254_2"),
param = str_remove(param, "^\\d+") %>%
str_replace("([:alpha:]+)(\\d+)$", "\\1[\\2]")
) %>%
ggplot(aes(time, conc, col = sample)) +
facet_wrap(vars(param), scales = "free_y", ncol = 2, labeller = label_parsed) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
geom_line() +
scale_colour_manual(values = c("firebrick", "grey")) +
theme(legend.position = "bottom") +
labs(x = "Retention time (min.)", y = "Detector response", col = NULL)
mals <- system.file("extdata/mals", package = "fffprocessr") %>%
load_mals() %>%
correct_baseline(4, 65)
mals %>%
mutate(param = str_to_upper(param) %>% str_replace("([:alpha:]+)(\\d+)$", "\\1[\\2]")) %>%
ggplot(aes(time, conc)) +
facet_wrap(
vars(fct_reorder(param, str_extract(param, "\\d+") %>% as.numeric())),
scales = "free_y", labeller = label_parsed
) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
geom_line() +
labs(x = "Retention time (min.)", y = "Detector response", col = NULL)
knitr::include_graphics("man/figures/CodeCogsEqn.png", dpi = 500)
knitr::include_graphics("man/figures/CodeCogsEqn_2.png", dpi = 500)
mals_rg <- mals %>%
filter(
time > 10,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "zimm")
mals_rg %>%
filter(param == "ls90") %>%
pivot_longer(c(rg_zimm, conc)) %>%
mutate(name = fct_recode(name, "LS[90]" = "conc", "r[g]~(nm)" = "rg_zimm")) %>%
ggplot(aes(time, value)) +
facet_wrap(vars(name), scales = "free_y", ncol = 2, labeller = label_parsed) +
geom_point(data = function(x) filter(x, name == "r[g]~(nm)", time < 60), alpha = .2, shape = 16) +
geom_line(data = function(x) filter(x, name == "LS[90]")) +
geom_hline(yintercept = 0, col = "grey", linetype = 3) +
labs(x = "Retention time (min.)", y = NULL, col = NULL)
mals_rg %>%
filter(timeslice %in% c(17.1, 24.1, 40)) %>%
distinct(timeslice, rg_zimm) %>%
mutate(d_geom = 2 * rg_zimm / sqrt(3/5))
mals_rg %>%
filter(timeslice %in% c(17.1, 24.1, 40)) %>%
mutate(
timeslice = paste(timeslice, "min."),
x = sin(pi * theta / 360) ^ 2,
y = 1 / rayleigh_ratio
) %>%
ggplot(aes(x, y)) +
facet_wrap(vars(timeslice), scales = "free_y") +
geom_smooth(method = "lm") +
geom_point() +
labs(x = expression("sin"^2*"("*theta*"/2)"), y = "1/R")
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
data %>%
filter(param == "65Cu", time > 10.5, time < 16) %>%
mutate(dh = 2 * 1e9 * calculate_rh(time) ) %>%
ggplot(aes(dh, conc, col = sample)) +
geom_line() +
scale_colour_manual(values = c("firebrick", "grey")) +
labs(x = "Calculated hydrodynamic diameter (nm)", y = "[Cu] (µg/L)", col = NULL)
# load a calibration curve:
mw_data <- system.file("extdata/mw_calibration", package = "fffprocessr") %>%
list.files(full.names = TRUE) %>%
read_csv()
mw_data %>%
with(calibrate_mw(peak_retention_time, mw_kda, type = "quadratic", predict = FALSE))
mw_data %>%
with(
calibrate_mw(
peak_retention_time,
mw_kda,
type = "quadratic", # or "linear"
newdata = c(1, 10, 100, 1000), # molecular weights (or time if output = "mw")
output = "time", # or "mw"
predict = TRUE
)
)
knitr::include_graphics("man/figures/CodeCogsEqn_1.png", dpi = 500)
knitr::include_graphics("man/figures/CodeCogsEqn_3.png", dpi = 500)
deconvolved <- data %>%
filter(param == "65Cu", time > 10) %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>%
mutate(
model = map(
data,
~ deconvolve_fff(
.x$time, .x$conc,
# these are the initial guesses for the model parameters
h = c(.8, .6, .2), mu = c(11, 14, 20), s = c(1, 1, 1), g = c(1, 2, 5),
fn = "skew_gaussian"
)
),
fitted = map(model, "fitted"),
peaks = map(model, "peaks")
)
deconvolved %>%
unnest(c(data, fitted, peaks)) %>%
pivot_longer(c(conc, fitted, starts_with("peak"))) %>%
ggplot(aes(time, value, col = name, size = name)) +
facet_wrap(vars(sample)) +
scale_colour_manual(
values = c("black", "firebrick", "grey", "grey", "grey"),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
scale_size_manual(
values = c(1, 2, .5, .5, .5),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
geom_line() +
labs(x = "Retention time (min.)", y = "[Cu] (µg/L)", col = NULL, size = NULL)
deconvolved_emg <- data %>%
filter(param == "56Fe", time > 10, sample == "sample_bennery_raw") %>%
group_by(date, param, sample) %>%
nest() %>%
ungroup() %>%
mutate(
model = map(
data,
~ deconvolve_fff(
.x$time, .x$conc,
# these are the initial guesses for the model parameters
h = c(35, 50, 8), mu = c(14, 20, 28), s = c(1, 1, 1), g = c(1, 1, .5),
fn = "emg"
)
),
fitted = map(model, "fitted"),
peaks = map(model, "peaks")
)
deconvolved_emg %>%
unnest(c(data, fitted, peaks)) %>%
pivot_longer(c(conc, fitted, starts_with("peak"))) %>%
ggplot(aes(time, value, col = name, size = name)) +
scale_colour_manual(
values = c("black", "firebrick", "grey", "grey", "grey"),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
scale_size_manual(
values = c(1, 1, .5, .5, .5),
labels = function(breaks) str_replace(breaks, "conc", "data")
) +
geom_line() +
labs(x = "Retention time (min.)", y = "[Fe] (µg/L)", col = NULL, size = NULL)
deconvolved %>%
unnest(c(data, starts_with("peak"))) %>%
pivot_longer(starts_with("peak"), names_to = "peak") %>%
group_by(date, sample, param, peak) %>%
summarize(conc_ppb = integrate_peak(time, value, injvol = 0.001, flowrate = 0.001))
rmarkdown::render("README.Rmd", "md_document")
rmarkdown::render("README.Rmd", "md_document")
rmarkdown::render("README.Rmd", "md_document")
library("devtools")
document()
?use_package()
use_package("here")
document()
?load_direct_quant
path <- system.file("extdata", package = "fffprocessr")
load_direct_quant(path = paste0(path, "/direct_quantification"))
?load_all
document()
load_all()
?load_direct_quant()
check()
rmarkdown::render("README.Rmd", "md_document")
rmarkdown::render("README.Rmd", "md_document")
document()
check()
rmarkdown::render("README.Rmd", "md_document")
library(devtools)
document()
load_all()
?peak_maxima
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
document()
load_all()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3, method = "sigma")
document()
check()
library(devtools)
document()
check()
library(devtools)
use_r("peak_maxima")
document()
check()

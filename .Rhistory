)
peak_maxima(data, peaks = 1)
round(peak_maxima(data, peaks = 1)$time)
unique(round(peak_maxima(data, peaks = 1)$time))
unique(round(c(peak_maxima(data, peaks = 1)$time, peak_maxima(data, peaks = 1, method = "sigma")$time)))
test()
sort(c(2,1,5,4))
sort(unique(round(maxima$time)))
maxima <- peak_maxima(data, peaks = 3)
sort(unique(round(maxima$time)))
test_that("peak_maxima() yields the expected peaks", {
maxima <- peak_maxima(data, peaks = 3)
expect_equal(sort(unique(round(maxima$time))), c(12, 14, 20, 21))
})
test_that("peak_maxima() orders by peak height to reach the prespecified number of peaks", {
tall_peaks <- c(
peak_maxima(data, peaks = 1)$time,
peak_maxima(data, peaks = 1, method = "sigma")$time
)
expect_equal(
unique(round(tall_peaks)),
14
)
})
test()
use_r("peak_maxima")
use_test("peak_maxima")
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
tesdat$test_y[4] <- NA_real_
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "gam")
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "gam")
data
group_vars = c("date", "sample", "param")
x_var = "time"
y_var = "conc"
focus = 10
k = 35
data %>%
dplyr::filter(.data[[x_var]] > focus)
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
)
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup()
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
x_var = "test_x"
y_var = "test_y"
group_vars = NULL
data <- tesdat
data %>%
dplyr::filter(.data[[x_var]] > focus)
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
)
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = {k})")
formula_gam
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
)
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup()
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak")))
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
)
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup()
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup() %>%
# select number of peaks, starting with largest
dplyr::group_by(!!!rlang::syms(group_vars))
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup() %>%
# select number of peaks, starting with largest
dplyr::group_by(!!!rlang::syms(group_vars)) %>%
dplyr::arrange(dplyr::desc(.data[[y_var]]))
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup() %>%
# select number of peaks, starting with largest
dplyr::group_by(!!!rlang::syms(group_vars)) %>%
dplyr::arrange(dplyr::desc(.data[[y_var]])) %>%
dplyr::slice(seq_len(peaks))
peaks <- 3
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup() %>%
# select number of peaks, starting with largest
dplyr::group_by(!!!rlang::syms(group_vars)) %>%
dplyr::arrange(dplyr::desc(.data[[y_var]])) %>%
dplyr::slice(seq_len(peaks))
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
fitted = mgcv::gam(as.formula(formula_gam)) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup() %>%
# select number of peaks, starting with largest
dplyr::group_by(!!!rlang::syms(group_vars)) %>%
dplyr::arrange(dplyr::desc(.data[[y_var]])) %>%
dplyr::slice(seq_len(peaks)) %>%
dplyr::ungroup()
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "gam")
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam")
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam", peaks = 3)
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam", peaks = 3)
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam", peaks = 4)
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam", peaks = 5)
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "sigma", peaks = 5)
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "sigma")
peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam")
test_that("peak_maxima() works with group_vars = NULL and alternate x and y variable names", {
result <- c(
ncol(ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "sigma"))),
ncol(ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam")))
)
expect_equal(
unique(result),
3
)
})
test_that("peak_maxima() works with group_vars = NULL and alternate x and y variable names", {
result <- c(
ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "sigma")),
ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "gam"))
)
expect_equal(
unique(result),
3
)
})
test()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
test_that("peak_maxima() yields the expected peaks", {
maxima <- peak_maxima(data, peaks = 3)
expect_equal(sort(unique(round(maxima$time))), c(12, 14, 20, 21))
})
peak_maxima(data, peaks = 3)
rm(list=ls())
test()
document()
test()
document()
test()
run_examples()
rm(list = ls())
?peak_maxima
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line()
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima()
)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(),
col = "red"
)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3),
col = "red"
)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "gam"),
col = "red"
)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "sigma"),
col = "red"
)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "sigma", n = 3),
col = "red"
)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "sigma", n = 5),
col = "red"
)
use_r("peak_maxima")
use_test("peak_maxima")
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
tesdat$test_y[4] <- NA_real_
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "gam")
group_peaks <- function(x) {
x <- c(0, x) # pad x with a zero so that x[i-1] exists when i=1
g <- rep(NA_real_, length(x))
counter <- 0
for(i in 2:length(x)) {
if(x[i] == 0) {
g[i] <- 0
} else if(x[i] == 1 & x[i] == x[i-1]) {
g[i] <- counter
} else {
counter <- counter + 1
g[i] <- counter
}
}
g[-1]
}
group_peaks(c(1,1,1,0,0,0,1,1))
group_peaks(c(1,1,1,0,NA,0,1,1))
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma", n = 3)
?vars()
document()
data <- data %>%
dplyr::mutate_at(dplyr::vars(c(.data[[x_var]], .data[[y_var]])), imputeTS::na_interpolation)
rm(list = c("group_peaks"))
document()
test_that("peak_maxima() handles NA", {
tesdat$test_y[4] <- NA_real_
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")),
4
)
})
test_that("peak_maxima() handles NA", {
tesdat$test_y[4] <- NA_real_
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")),
4
)
})
rm(list = ls())
test()
?use_r("peak_maxima")
use_r("peak_maxima")
?all_vars
document()
rm(list = ls())
test()
?peak_maxima
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "sigma", n = 5),
col = "red"
)
document()
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "sigma", n = 5),
col = "red"
)
load_all()
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "sigma", n = 5),
col = "red"
)
rm(list = ls())
check()
use_r("peak_maxima")
tibble(a = 1, b = 2, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.x)))
tibble(a = 1, b = 2, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.)))
?any_vars
?filter_at
use_r("correct_baseline")
tibble(a = 1, b = 2, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = 1, b = NA, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), all_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), all_vars(!is.na(.)))
document()
check()
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(a, b))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), !is.na)
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), !is.na(.))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_any(c(a, b)), !is.na(.))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), !is.na(.))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), ~ !is.na(.x))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), ~ !is.na(.data))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), ~ !is.na(utils::globalVariables(".")))
document()
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4)
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) -> test
test
test[is.na(test$b, )]
test[is.na(test$b), ]
test[!is.na(test$b), ]
document()
document()
document()
check()

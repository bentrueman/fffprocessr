tibble(x = 1:10, y = runif(10)) %>% filter(!row_number() %in% seq_len(2))
document()
load_all()
load_icp
?load_icp
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path, metadata = 0)
list.files(path = path, pattern = "*.csv", full.names = TRUE) %>%
rlang::set_names() %>%
purrr::map_dfr(
~ readr::read_csv(.x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
filter(!row_number() %in% seq_len(0)),
.id = "file"
)
list.files(path = path, pattern = "*.csv", full.names = TRUE) %>%
rlang::set_names() %>%
purrr::map(
~ readr::read_csv(.x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
filter(!row_number() %in% seq_len(0)),
.id = "file"
)
document()
check()
?row_number
document()
check()
?load_icp
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
use_r("deconvolve_fff")
gaussian <- function(x, h, mu, s, g) {
h * exp(-(x - mu) ^ 2 / (2 * s ^ 2))
}
gaussian(x=1, h=1, mu=1, g=1)
gaussian(x=1, h=1, mu=1, s=1, g=)
gaussian(x=1, h=1, mu=1, s=1, g=1)
?gaussian
?normal
fn <- "test"
sum(fn %in% c("skew_gaussian", "emg", "normal"))
fn <- "emg"
sum(fn %in% c("skew_gaussian", "emg", "normal"))
document()
load_all()
?deconvolve_fff
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1))
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
set.seed(1)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
set.seed(2)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
set.seed(3)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
set.seed(4)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
set.seed(400)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
set.seed(400)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(.5, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
set.seed(400)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
h = c(1, 1); mu = c(3, 7); s = c(1, 1); g = c(1, 1)
inputs <- c("h", "mu", "s", "g")
c_inputs <- function(input, number) paste(c("x", paste0(input, number)), collapse = ", ")
c_inputs
rename_inputs <- function(x) {
names(x) <- paste0(deparse(substitute(x)), seq_len(length(x)))
x
}
start_vals <- as.list(
c(rename_inputs(h), rename_inputs(mu),
rename_inputs(s), rename_inputs(g))
)
start_vals
formula <- stats::reformulate(
termlabels = purrr::map_chr(
seq_len(peaks),
~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")
),
response = "y"
)
set.seed(400)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1), fn = "normal")
peaks <- 2
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = "port",
control = stats::nls.control(maxiter = 300, tol = .1)
)
formula <- stats::reformulate(
termlabels = purrr::map_chr(
seq_len(peaks),
~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")
),
response = "y"
)
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = "port",
control = stats::nls.control(maxiter = 300, tol = .1)
)
fn <- "normal"
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = "port",
control = stats::nls.control(maxiter = 300, tol = .1)
)
formula
fn
formula <- stats::reformulate(
termlabels = purrr::map_chr(
seq_len(peaks),
~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")
),
response = "y"
)
formula
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = "port",
control = stats::nls.control(maxiter = 300, tol = .1)
)
# for nls formula:
normal <- function(x, h, mu, s, g) {
h * exp(-(x - mu) ^ 2 / (2 * s ^ 2))
}
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = "port",
control = stats::nls.control(maxiter = 300, tol = .1)
)
start_vals
start_vals[1:6]
model <- stats::nls(
formula = formula,
start = start_vals[1:6],
algorithm = "port",
control = stats::nls.control(maxiter = 300, tol = .1)
)
formula
# for nls formula:
normal <- function(x, h, mu, s) {
h * exp(-(x - mu) ^ 2 / (2 * s ^ 2))
}
formula <- stats::reformulate(
termlabels = purrr::map_chr(
seq_len(peaks),
~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")
),
response = "y"
)
formula <- stats::reformulate(
termlabels = purrr::map_chr(
seq_len(peaks),
~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")
),
response = "y"
)
formula
stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)algorithm = "port";
iter = 300; tol = 1e-1
algorithm = "port";
iter = 300; tol = 1e-1
formula <- stats::reformulate(
termlabels = purrr::map_chr(
seq_len(peaks),
~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")
),
response = "y"
)
formula
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
c_inputs <- function(input, number) paste(c("x", paste0(input, number)), collapse = ", ")
c_inputs
# for nls formula:
normal <- function(x, h, mu, s, g) {
h * exp(-(x - mu) ^ 2 / (2 * s ^ 2))
}
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
model <- stats::nls(
formula = formula,
start = start_vals[1:6],
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
formula
fn
inputs <- if(fn == "normal") c("h", "mu", "s") else c("h", "mu", "s", "g")
inputs
c_inputs <- function(input, number) paste(c("x", paste0(input, number)), collapse = ", ")
rename_inputs <- function(x) {
names(x) <- paste0(deparse(substitute(x)), seq_len(length(x)))
x
}
start_vals <- as.list(
c(rename_inputs(h), rename_inputs(mu),
rename_inputs(s), rename_inputs(g))
)
start_vals
inputs
c_inputs(inputs, 1)
formula <- stats::reformulate(
termlabels = purrr::map_chr(
seq_len(peaks),
~ paste0(paste0(paste0(fn, "("), c_inputs(inputs, .x)), ")")
),
response = "y"
)
formula
normal
# for nls formula:
normal <- function(x, h, mu, s) {
h * exp(-(x - mu) ^ 2 / (2 * s ^ 2))
}
x
y
model <- stats::nls(
formula = formula,
start = start_vals,
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
model <- stats::nls(
formula = formula,
start = start_vals[1:6],
algorithm = algorithm,
control = stats::nls.control(maxiter = iter, tol = tol)
)
modle
model
start_vals <- as.list(
c(rename_inputs(h), rename_inputs(mu),
rename_inputs(s), rename_inputs(g))
)
start_vals
inputs
map(start_vals, ~ str_detect(.x, inputs))
inputs
paste(inputs, collapse = "|")
map(start_vals, ~ str_detect(.x, paste(inputs, collapse = "|")))
map(start_vals, ~ str_detect(.x, "s"))
map(start_vals, ~ str_detect(name(.x), "s"))
map(start_vals, ~ str_detect(names(.x), "s"))
names(start_vals)
names(start_vals) %>% str_detect(paste(inputs, collapse = "|"))
start_vals[names(start_vals) %>% str_detect(paste(inputs, collapse = "|"))]
start_vals <- as.list(
c(rename_inputs(h), rename_inputs(mu),
rename_inputs(s), rename_inputs(g))
)
start_vals
start_vals[names(start_vals) %>% stringr::str_detect(paste(inputs, collapse = "|"))]
filter_vals <- names(start_vals) %>% stringr::str_detect(paste(inputs, collapse = "|"))
filter_vals
document()
?deconvolve_fff
document()
?deconvolve_fff
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1))
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
document()
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
document()
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1, 1))
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), g = c(1,1), fn = "normal")
document()
check()
?deconvolve_fff
set.seed(0)
x <- seq(0, 10, length.out = 100)
# two gaussian peaks:
y <- exp(-(x - 3) ^ 2 / 2) + exp(-(x - 7) ^ 2 / 2) + rnorm(100, 0, .1)
deconvolve_fff(x, y, h = c(1, 1), mu = c(3, 7), s = c(1, 1), fn = "normal")
load_all()
?load_icp
use_r("load_icp")
check()
document()
check()
build_readme()
build_readme()
library(devtools)
use_r("load_uv")
use_r("load_icp")
use_r("combine_fff")
document()
load_all()
?load_uv
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90)
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90) %>% distinct(sample)
library(tidyverse)
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90) %>% distinct(sample)
?load_icp
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path) %>% distinct(sample)
?combine_fff
path <- system.file("extdata", package = "fffprocessr")
combine_fff(load_icp(path), load_uv(path, UV254_1))
combine_fff
document()
build_readme()
check()
build_readme()
library("devtools")
use_r("load_uv")
use_r("load_icp")
use_r("load_mals")
document()
load_all()
?load_uc
?load_uv
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90)
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90, keywords = "ennery")
use_r("load_uv")
keywords <- "ennery"
paste(collapse = "|")
paste(keywords, collapse = "|")
file_list <- list.files(path = path, pattern = "*.txt", full.names = TRUE)
file_list
keep_files <- if(is.null(keywords)) {rep(TRUE, length(file_list))} else{
keywords %>%
paste(collapse = "|") %>%
stringr::str_detect(file_list)
}
keep_files
document()
load_all()
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90)
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90, keywords = "enn")
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90, keywords = "blank")
use_R("load_icp")
use_r("load_icp")
use_r("load_mals")
document()
load_all()
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90, kewords = "blank")
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90, keywords = "blank")
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path, UV254_1, UV254_2, LS90, keywords = "blank")
document()
load_all()
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path, UV254_1, UV254_2, LS90, keywords = "blank")
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path, keywords = "blank")
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path, keywords = "ockwock")
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path, keywords = "jdk")
?load_mals
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path)
document()
load_all()
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path)
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "blank")
list.files(path = path, pattern = ".+\\.txt", full.names = TRUE)
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls7")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls1")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls4")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls6")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls2")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls25")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls5")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls7")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls9")
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path, keywords = "ls8")
document()
check()
library(devtools)
use_r("load_uv")
use_r("load_icp")
use_r("load_mals")
document()
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path)
?load_uv
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90)
?load_icp
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
check()

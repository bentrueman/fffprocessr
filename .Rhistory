"No filenames match the naming convention for MALS data.
Use 'angle_names=?' to specify a non-default naming scheme"
)
})
test_that("load_mals() yields the expected error message when no files match the naming convention.", {
path <- system.file("extdata", package = "fffprocessr")
expect_error(
load_mals(path = path),
"No filenames"
)
})
document()
check()
?load_icp
load_uv
?load_uv
path <- system.file("extdata/mals", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90)
?load_mals
?message
?load_mals
path <- system.file("extdata/mals", package = "fffprocessr")
path
file_list <- list.files(path = path, pattern = "*.txt", full.names = TRUE)
file_list[stringr::str_detect(file_list, "ls\\d+-\\d+")]
mals_files <- file_list[stringr::str_detect(file_list, "ls\\d+-\\d+")]
paste0("The following files include the default naming convention for MALS data: ", mals_files)
if(length(mals_files) > 0) message(
paste0("The following files include the default naming convention for MALS data: ", paste(mals_files, collapse = ", "))
)
paste0("The following files include the default naming convention for MALS data: ", paste(mals_files, collapse = ", "))
paste0("The following files include the default naming convention for MALS data: ", paste(mals_files, collapse = ",\n"))
if(length(mals_files) > 0) message(
"Some files include the default naming convention for MALS data: "
)
if(length(mals_files) > 0) message(
"Some files include the default naming convention for MALS data."
)
if(length(mals_files) > 0) message(
"Some files include the default naming convention for MALS data (e.g., 'ls7-20')."
)
?warning
if(length(mals_files) > 0) warning(
"Some files include the default naming convention for MALS data (e.g., 'ls7-20')."
)
?expect_warning
document()
if(length(mals_files) > 0) warning(
"Some filenames include the default naming convention for MALS data (e.g., 'ls7-20')."
)
test_that("load_uv() yields the expected warning when some files match the naming convention for MALS data.", {
path <- system.file("extdata/mals", package = "fffprocessr") # wrong path
expect_warning(
load_uv(path = path),
"Some filenames include"
)
})
path <- system.file("extdata/mals", package = "fffprocessr") # wrong path
load_uv(path = path)
?load_uv
load_uv(path = path, UV254_1)
test_that("load_uv() yields the expected warning when some files match the naming convention for MALS data.", {
path <- system.file("extdata/mals", package = "fffprocessr") # wrong path
expect_warning(
load_uv(path = path, UV254_1),
"Some filenames include"
)
})
document()
check()
load_uv
library(devtools)
angles = c(7, 12, 20,  28, 36, 44, 52, 60, 68, 76, 84,
90, 100, 108, 116, 124, 132, 140, 148, 156, 164)
angles
mals_calib <- tibble::tribble(
~number, ~theta, ~coefficient,
1,      7,  0.00178775,
2,     12, 0.00368763,
3,     20,  0.00271051,
4,     28,  0.00176462,
5,     36,  0.00231833,
6,     44,  0.00152087,
7,     52,  0.00185855,
8,     60,  0.00194345,
9,     68,  0.00194282,
10,    76,  0.00206297,
11,    84,  0.00215706,
12,    90,  0.00248170,
13,   100,  0.00213770,
14,   108,  0.00192152,
15,   116,  0.00199917,
16,   124,  0.00181977,
17,   132,  0.00161909,
18,   140,  0.00135980,
19,   148,  0.00175342,
20,   156,  0.00158798,
21,   164,  0.00202189
)
usethis::use_data(angles, mals_calib, internal = TRUE)
load_all()
fffprocessr:::angles
fffprocessr:::mals_calib
fffprocessr:::mals_calib
fffprocessr:::angles
?calculate_rg
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
calculate_rg(mals_data)
use_test("calculate_rg")
rg <- calculate_rg(mals_data)
rg$rg_zimm
range(rg$rg_zimm)
test_that("calculate_rg() returns expected results.", {
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
rg <- calculate_rg(mals_data)
expect_equal(range(rg$rg_zimm), c(29.83337, 85.88059))
})
test_that("calculate_rg() returns expected results.", {
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
rg <- calculate_rg(mals_data)
expect_equal(range(rg$rg_zimm), c(29.833372, 85.880589))
})
use_r("load_mals")
document()
?load_mals
path <- system.file("extdata/mals", package = "fffprocessr")
load_mals(path = path)
load_mals
use_test("calculate_rg")
test_that("calculate_rg() returns expected results.", {
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
rg <- calculate_rg(mals_data)
expect_equal(range(rg$rg_zimm), c(29.833372, 85.880589))
})
document()
?calculate_rg
?load_mals
document()
check()
?use_data_raw
usethis::use_data_raw(name = "DATASET")
check()
tibble(
x = 1:100,
y = x - x ^2
) %>%
ggplot(aes(x, y)) +
geom_point()
library(tidyverse)
tibble(
x = 1:100,
y = x - x ^2
) %>%
ggplot(aes(x, y)) +
geom_point()
tibble(
x = 1:100,
y = x - .1 * x ^2
) %>%
ggplot(aes(x, y)) +
geom_point()
tibble(
x = 1:100,
y = 10 * x - .1 * x ^2
) %>%
ggplot(aes(x, y)) +
geom_point()
tibble(
x = 1:100,
y = 10 * x - .01 * x ^2
) %>%
ggplot(aes(x, y)) +
geom_point()
tibble(
x = 1:100,
y = 10 * x - .05 * x ^2
) %>%
ggplot(aes(x, y)) +
geom_point()
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2
) %>%
ggplot(aes(x, y)) +
geom_point()
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + rnorm(length(x))
) %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth()
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + rnorm(length(x), 5)
) %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth()
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + rnorm(length(x), 10)
) %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth()
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + rnorm(length(x), 10)
) %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + rnorm(length(x), 10)
) %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 3))
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + rnorm(length(x), 10)
) -> data
data
data %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 3))
lm(y ~ poly(x, 2), data = data)
lm(y ~ poly(x, 2), data = data) %>% summary()
lm(y ~ poly(x, 3), data = data) %>% summary()
lm(y ~ poly(x, 3), data = data) %>% coef()
(lm(y ~ poly(x, 3), data = data) %>% coef())[2]
use_r("calculate_rg")
library(devtools)
use_r("calculate_rg")
document()
rmarkdown::render("README.Rmd", "md_document")
mals <- system.file("extdata/mals", package = "fffprocessr") %>%
load_mals() %>%
correct_baseline(4, 65)
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
?calculate_rg
document()
mals <- system.file("extdata/mals", package = "fffprocessr") %>%
load_mals() %>%
correct_baseline(4, 65)
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + 10 * rnorm(length(x))
) %>%
ggplot(aes(x, y)) + geom_point()
tibble(
x = 1:100,
y = 10 * x - .08 * x ^2 + 10 * rnorm(length(x))
) -> data
data %>%
ggplot(aes(x, y)) + geom_point()
lm(y ~ x + I(x^2), data = data)
lm(y ~ poly(x, 2), data = data)
?poly
lm(y ~ poly(x, 2, raw = TRUE), data = data)
document()
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 3) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 3) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 2) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
build_readme()
rmarkdown::render("README.Rmd", "md_document")
rmarkdown::render("README.Rmd", "md_document")
use_r("calculate_rg")
document()
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 3) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 4) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 2) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 1) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
stats::lm(rayleigh_ratio ~ poly(x, order, raw = TRUE), data = .x)
document()
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 1) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 2) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 3) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 4) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt", order = 5) %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
document()
rmarkdown::render("README.Rmd", "md_document")
check()
?calculate_rg
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
mals_corr <- correct_baseline(mals_data, 4, 65)
rg <- calculate_rg(mals_corr, method = "watt")
rg
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
rg$rg_watt[rg$timeslice == 40]
mals %>%
filter(
time > 39,
param != "ls7"
) %>%
calculate_rg(window = .05, method = "watt") %>%
filter(timeslice == 40) %>%
distinct(rg_watt) %>%
mutate(d_geom = 2 * rg_watt / sqrt(3/5))
rg$rg_watt[rg$timeslice == 40]
path <- system.file("extdata/mals", package = "fffprocessr")
mals_data <- load_mals(path = path)
test_that("calculate_rg() returns expected results.", {
rg <- calculate_rg(mals_data)
expect_equal(range(rg$rg_zimm), c(29.833372, 85.880589))
})
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.1861)
})
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7" & mals_corr$time > 39, ]
rg <- calculate_rg(mals_corr, method = "watt")
rg$rg_watt[rg$timeslice == 40]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
rg$rg_watt[rg$timeslice == 40]
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
library(devtools)
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
library(testthat)
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, window = .05, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(rg$rg_watt[rg$timeslice == 40], 135.2001)
})
unique(rg$rg_watt[rg$timeslice == 40])
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(unique(rg$rg_watt[rg$timeslice == 40]), 135.2001)
})
unique(rg$rg_watt[rg$timeslice == 40])
rg <- calculate_rg(mals_corr, method = "watt")
unique(rg$rg_watt[rg$timeslice == 40])
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
expect_equal(unique(rg$rg_watt[rg$timeslice == 40]), 135.1861)
})
expect_equal(round(unique(rg$rg_watt[rg$timeslice == 40]), 4), 135.1861)
rg_40 <- rg$rg_watt[rg$timeslice == 40]
expect_equal(round(unique(rg_40), 4), 135.1861)
test_that("calculate_rg() returns expected results for 'watt' method.", {
mals_corr <- correct_baseline(mals_data, 4, 65)
mals_corr <- mals_corr[mals_corr$param != "ls7", ]
rg <- calculate_rg(mals_corr, method = "watt")
rg_40 <- rg$rg_watt[rg$timeslice == 40]
expect_equal(round(unique(rg_40), 4), 135.1861)
})
check()

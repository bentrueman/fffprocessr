dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param)# %>%
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols = tidyselect::starts_with("sample_"), names_to = "sample", values_to = "conc") %>%
dplyr::mutate(conc = .data$conc - .data$blank) %>%
# filter samples that should be implicit NAs due to pivot_wider() / pivot_longer() combo:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(test = mean(is.na(.data$conc))) %>%
dplyr::filter(.data$test < 1) %>%
dplyr::select(-.data$test) %>%
dplyr::ungroup()
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols = tidyselect::starts_with("sample_"), names_to = "sample", values_to = "conc")
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup()
combine_fff
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
tidyr::pivot_wider(-file, names_from = sample, values_from = .data$conc, values_fn = mean) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols = tidyselect::starts_with("sample_"), names_to = "sample", values_to = "conc") %>%
dplyr::mutate(conc = .data$conc - .data$blank) %>%
# filter samples that should be implicit NAs due to pivot_wider() / pivot_longer() combo:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(test = mean(is.na(.data$conc))) %>%
dplyr::filter(.data$test < 1) %>%
dplyr::select(-.data$test) %>%
dplyr::ungroup()
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
tidyr::pivot_wider(-file, names_from = sample, values_from = .data$conc, values_fn = mean) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup()# %>%
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
tidyr::pivot_wider(-file, names_from = sample, values_from = .data$conc, values_fn = mean) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup()# %>%
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
tidyr::pivot_wider(-file, names_from = sample, values_from = .data$conc, values_fn = mean) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols = tidyselect::starts_with("sample_"), names_to = "sample", values_to = "conc")# %>%
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
tidyr::pivot_wider(-file, names_from = sample, values_from = .data$conc, values_fn = mean) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols = tidyselect::starts_with("sample_"), names_to = "sample", values_to = "conc") %>%
dplyr::mutate(conc = .data$conc - .data$blank)# %>%
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
tidyr::pivot_wider(-file, names_from = sample, values_from = .data$conc, values_fn = mean) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols = tidyselect::starts_with("sample_"), names_to = "sample", values_to = "conc") %>%
dplyr::mutate(conc = dplyr::if_else(is.na(.data$blank), .data$conc, .data$conc - .data$blank))# %>%
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
dplyr::bind_rows() %>%
# add 3 * sigma detection limit as a new column:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(blank = dplyr::if_else(sample == "blank" & .data$time > 1, .data$conc, NA_real_)) %>%
dplyr::ungroup() %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate(three_sigma = 3 * stats::sd(.data$blank, na.rm = TRUE)) %>%
dplyr::ungroup() %>%
dplyr::select(-.data$blank) %>%
tidyr::pivot_wider(-file, names_from = sample, values_from = .data$conc, values_fn = mean) %>%
# linear interpolation here:
dplyr::arrange(date, .data$param, .data$time) %>%
dplyr::group_by(date, .data$param) %>%
dplyr::mutate_at(
dplyr::vars(tidyselect::starts_with("sample_"), tidyselect::matches("^blank$")),
purrr::possibly(imputeTS::na_interpolation, otherwise = NA_real_)
) %>%
dplyr::ungroup() %>%
tidyr::pivot_longer(cols = tidyselect::starts_with("sample_"), names_to = "sample", values_to = "conc") %>%
dplyr::mutate(conc = dplyr::if_else(is.na(.data$blank), .data$conc, .data$conc - .data$blank)) %>%
# filter samples that should be implicit NAs due to pivot_wider() / pivot_longer() combo:
dplyr::group_by(date, sample, .data$param) %>%
dplyr::mutate(test = mean(is.na(.data$conc))) %>%
dplyr::filter(.data$test < 1) %>%
dplyr::select(-.data$test) %>%
dplyr::ungroup()
?combine_fff
path <- system.file("extdata", package = "fffprocessr")
combine_fff(load_icp(path), load_uv(path, UV254_1))
document()
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01"))
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = FALSE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = FALSE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:10
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:10
)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1) %>%
dplyr::distinct(date, sample, param)
tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01")) %>%
combine_fff(uv = ., subtract_blank = TRUE, focus = 1) %>%
dplyr::distinct(date, param)
missing_blank <- tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01"))
test_that("combine_fff() handles missing blank runs", {
expect_equal(
nrow(distinct(combine_fff(uv = ., subtract_blank = TRUE, focus = 1), date, param))
nrow(distinct(combine_fff(uv = ., subtract_blank = TRUE, focus = 1), date, param))
distinct(combine_fff(uv = ., subtract_blank = TRUE, focus = 1), date, param)
expect_equal(
nrow(dplyr::distinct(combine_fff(uv = ., subtract_blank = TRUE, focus = 1), date, param)), 4
)
missing_blank <- tidyr::crossing(
date = c("2021-01-01", "2021-02-01"),
sample = c("blank", "sample_1"),
param = letters[1:2],
time = 1:2
) %>%
tidyr::unite(file, date, sample, param, remove = FALSE) %>%
dplyr::mutate(conc = runif(nrow(.))) %>%
dplyr::filter(!(sample == "blank" & date == "2021-02-01"))
test_that("combine_fff() handles missing blank runs", {
expect_equal(
nrow(dplyr::distinct(combine_fff(uv = ., subtract_blank = TRUE, focus = 1), date, param)), 4
)
})
expect_equal(
nrow(dplyr::distinct(combine_fff(uv = missing_blank, subtract_blank = TRUE, focus = 1), date, param)), 4
)
test_that("combine_fff() handles missing blank runs", {
expect_equal(
nrow(dplyr::distinct(combine_fff(uv = missing_blank, subtract_blank = TRUE, focus = 1), date, param)), 4
)
})
test_that("combine_fff() handles missing blank runs", {
expect_equal(
nrow(
dplyr::distinct(
combine_fff(uv = missing_blank, subtract_blank = TRUE, focus = 1),
date, param
)
), 4
)
})
test()
document()
test()
check()

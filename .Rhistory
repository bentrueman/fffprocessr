g = "a",
x = 1:100,
y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
expect_equal(
ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "x", y_var = "y", method = "sigma")),
4
)
})
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "", x_var = "x", y_var = "y", method = "sigma")),
4
)
expect_equal(
ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "x", y_var = "y", method = "sigma")),
4
)
peak_maxima(tesdat, group_vars = NULL, x_var = "x", y_var = "y", method = "sigma")
test_that("peak_maxima() works with group_vars = NULL and alternate x and y variable names", {
tesdat <- tibble::tibble(
g = "a",
x = 1:100,
y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
expect_equal(
ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "x", y_var = "y", method = "sigma")),
3
)
})
test()
use_r("peak_maxima")
document()
test()
?peak_maxima
peak_maxima(data, peaks = 3)
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3, method = "sigma")
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3, group_vars = NULL, method = "sigma")
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3, group_vars = NULL, method = "sigma")
data %>% rename(conc2 = con)
data %>% rename(conc2 = conc)
data %>% rename(conc2 = conc) %>% peak_maxima(data, peaks = 3, group_vars = NULL, method = "sigma")
data %>% rename(conc2 = conc) %>% peak_maxima(data, peaks = 3, group_vars = NULL, method = "sigma", y_var = "conc2")
data %>% peak_maxima(data, peaks = 3, group_vars = NULL, method = "sigma")
data %>% peak_maxima(peaks = 3, group_vars = NULL, method = "sigma")
data %>% rename(conc2 = conc) %>% peak_maxima(peaks = 3, group_vars = NULL, method = "sigma", y_var = "conc2")
test()
check()
use_test("peak_maxma")
test_that("peak_maxima() works with group_vars = NULL and alternate x and y variable names", {
expect_equal(
ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "sigma")),
3
)
})
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
test_that("peak_maxima() works with group_vars = NULL and alternate x and y variable names", {
expect_equal(
ncol(peak_maxima(tesdat, group_vars = NULL, x_var = "test_x", y_var = "test_y", method = "sigma")),
3
)
})
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")),
3
)
test_that("peak_maxima() works with group_vars equal to an internal variable name", {
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")),
3
)
})
peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")
test_that("peak_maxima() works with group_vars equal to an internal variable name", {
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")),
4
)
})
data <- data.frame(
x = "a",
test_x = seq(0, 30, by = .1),
test_y = stats::runif(301, 0, 1)
)
data$test_y <- data$test_y + data$test_x
test_that("correct_baseline() works with group_vars = NULL and alternate x and y variable names", {
expect_equal(
ncol(correct_baseline(
data, left = .2, right = 29.8,
group_vars = NULL, x_var = "test_x", y_var = "test_y"
)),
2
)
})
test_that("correct_baseline() works with group_vars = NULL and alternate x and y variable names", {
expect_equal(
ncol(correct_baseline(
data, left = .2, right = 29.8,
group_vars = "x", x_var = "test_x", y_var = "test_y"
)),
2
)
})
?use_r("peak_maxima")
use_r("peak_maxima")
testdat
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
tesdat
testdat$test_y[4] <- NA_real_
tesdat <- tibble::tibble(
x = "a",
test_x = 1:100,
test_y = withr::with_seed(101, {stats::rlnorm(length(x), sdlog = 3)})
)
tesdat$test_y[4] <- NA_real_
tesdat
test_that("peak_maxima() handles NA", {
tesdat$test_y[4] <- NA_real_
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")),
4
)
})
test_that("peak_maxima() works with group_vars equal to an internal variable name", {
expect_equal(
ncol(peak_maxima(tesdat, group_vars = "x", x_var = "test_x", y_var = "test_y", method = "sigma")),
4
)
})
use_test("peak_maxima")
test_that("peak_maxima() orders by peak height and x", {
expect_equal(FALSE, TRUE)
})
test_that("peak_maxima() orders by peak height and x to reach number of prespecified peaks", {
expect_equal(FALSE, TRUE)
})
g <- c("x", "x1", "x3")
vars <- c("x", "y")
vars %in% g
sum(vars %in% g)
g <- c("x", "x1", "x11")
while(sum(vars %in% g) > 0) {
paste0(vars, 1)
}
vars
paste0(vars, 1)
vars
g
sum(vars %in% g
sum(vars %in% g)
sum(vars %in% g)
while(sum(vars %in% g) > 0) {
vars <- paste0(vars, 1)
}
sum(vars %in% g)
vars
?peak_maxima
library(devtools)
use_r("peak_maxima")
test <- function(var) lm({{var}} ~ x)
tibble(x = 1:10, y = x + rnorm())
tibble(x = 1:10, y = x + rnorm())
library(tidyverse)
tibble(x = 1:10, y = x + rnorm())
tibble(x = 1:10, y = x + rnorm(length()))
tibble(x = 1:10, y = x + rnorm(length(x)))
tibble(x = 1:10, y = x + rnorm(length(x))) %>% test()
tibble(x = 1:10, y = x + rnorm(length(x))) %>% with(test)
tibble(x = 1:10, y = x + rnorm(length(x))) %>% with(test(var = y))
test()
test
test <- function(var, ...) lm({{var}} ~ x, ...)
tibble(x = 1:10, y = x + rnorm(length(x))) %>% test(var = y, data = .)
tibble(x = 1:10, y = x + rnorm(length(x))) %>% ith(lm(y ~ x))
tibble(x = 1:10, y = x + rnorm(length(x))) %>% with(lm(y ~ x))
?reformulate
?mgcv::gam
library(tidyverse)
tibble(x = 1:100, y = x + rnorm(length(x)))
tibble(x = 1:100, y = x + rnorm(length(x))) %>% mgcv::gam(y ~ s(x), data = .)
formula <- "y ~ s(x)"
tibble(x = 1:100, y = x + rnorm(length(x))) %>% mgcv::gam(formula, data = .)
formula <- formula("y ~ s(x)")
tibble(x = 1:100, y = x + rnorm(length(x))) %>% mgcv::gam(formula, data = .)
library(devtools)
use_r("peak_maxima")
formula_gam
document()
?peak_maxima
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
x_var = "time"
y_var = "conc"
glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = k)")
glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = k)") %>%
mgcv::formula.gam()
glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = k)") %>%
formula()
?formula
glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = k)") %>%
stats::formula()
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = k)") %>%
stats::formula()
formula_gam
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
k = 35
glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = {k})") %>%
stats::formula()
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
formula_gam <- glue::glue(".data${y_var} ~ s(.data${x_var}, bs = 'cs', k = {k})") %>%
stats::formula()
formula_gam
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
formula_gam
?formula
formula_gam <- glue::glue(".data${y_var} ~ s(.data${x_var}, bs = 'cs', k = {k})") %>%
stats::as.formula()
formula_gam
data
data %>% mgcv::gam(formula_gam)
formula_gam
formula_gam <- glue::glue(".data${y_var} ~ s(.data${x_var}, bs = 'cs', k = {k})") %>%
stats::as.formula()
formula_gam
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = {k})") %>%
stats::as.formula()
data %>% mgcv::gam(formula_gam)
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = {k})") %>%
stats::as.formula(env = new.env())
data %>% mgcv::gam(formula_gam)
formula_gam <- glue::glue("{y_var} ~ {x_var}") %>%
stats::as.formula()
data %>% mgcv::gam(formula_gam)
data %>% lm(formula_gam)
data %>% lm(formula_gam, data = .)
data %>% mgcv::gam(formula_gam, data = .)
formula_gam
data %>% mgcv::gam(formula_gam, data = .)
formula_gam <- glue::glue("{y_var} ~ s({x_var})") %>%
stats::as.formula()
data %>% mgcv::gam(formula_gam, data = .)
formula_gam <- glue::glue(".data${y_var} ~ s({x_var})") %>%
stats::as.formula()
data %>% mgcv::gam(formula_gam, data = .)
formula_gam <- glue::glue("{y_var} ~ s({x_var})") %>%
stats::as.formula()
data %>% mgcv::gam(formula_gam, data = .)
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs')") %>%
stats::as.formula()
data %>% mgcv::gam(formula_gam, data = .)
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = {k})") %>%
stats::as.formula()
data %>% mgcv::gam(formula_gam, data = .)
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = {k})") %>%
stats::as.formula()
formula_gam
data %>% mgcv::gam(formula_gam, data = .)
document()
?peak_maxima
peak_maxima(data, peaks = 3)
data %>% mgcv::gam(formula_gam, data = .)
data %>% mutate(test = mgcv::gam(formula_gam))
data %>% mutate(test = mgcv::gam(y ~ s(conc)))
data %>% mutate(test = mgcv::gam(conc ~ s(time)))
data %>% mutate(test = mgcv::gam(conc ~ s(time)) %>% fitted())
?formula
?fo
formula_gam
data %>% mutate(test = mgcv::gam(formula_gam) %>% fitted())
formula_gam
data %>% mutate(test = mgcv::gam(formula_gam, data  = data) %>% fitted())
document()
?peak_maxima
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
document*
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
environment(gamm)
environment(mgcv::gam)
environment(formula_ga)
environment(formula_gam)
use_r("peak_maxima")
formula_gam <- glue::glue("{y_var} ~ s({x_var}, bs = 'cs', k = {k})") %>%
stats::as.formula(env = "namespace:mgcv")
data
data %>%
dplyr::filter(.data[[x_var]] > focus)
focus = 10
data %>%
dplyr::filter(.data[[x_var]] > focus)
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
x = .data[[x_var]],
y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>% # GAM DOESN'T KNOW WHERE TO GET THE VARIABLES FROM
mgcv::predict.gam())
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
)
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
#dplyr::select(-c(.data$x, .data$y)) %>%
dplyr::filter(.data$peak %in% seq_len(peaks)) %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup()
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
#dplyr::select(-c(.data$x, .data$y)) %>%
dplyr::filter(.data$peak %in% seq_len(peaks))
peaks = 3
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
#dplyr::select(-c(.data$x, .data$y)) %>%
dplyr::filter(.data$peak %in% seq_len(peaks))
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
#dplyr::select(-c(.data$x, .data$y)) %>%
dplyr::filter(.data$peak %in% seq_len(peaks)) %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak")))
group_vars = c("date", "sample", "param")
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup()
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
#dplyr::select(-c(.data$x, .data$y)) %>%
dplyr::filter(.data$peak %in% seq_len(peaks)) %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak")))
data %>%
dplyr::filter(.data[[x_var]] > focus) %>%
dplyr::mutate(
#x = .data[[x_var]],
#y = .data[[y_var]],
fitted = mgcv::gam(formula_gam, data = .) %>%
mgcv::predict.gam(),
diff = dplyr::lead(.data$fitted) - .data$fitted, # slope
sign = sign(.data$diff), # sign of slope
diff_sign = dplyr::lead(.data$sign) - .data$sign, # delta sign of slope
peak = cumsum(.data$diff_sign > 0)
) %>%
dplyr::ungroup() %>%
#dplyr::select(-c(.data$x, .data$y)) %>%
dplyr::filter(.data$peak %in% seq_len(peaks)) %>%
dplyr::group_by(!!!rlang::syms(c(group_vars, "peak"))) %>%
dplyr::summarize(
!!x_var := (.data[[x_var]])[which.max(.data[[y_var]])],
!!y_var := max(.data[[y_var]]),
) %>%
dplyr::ungroup()
document()
?peak_maxima
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
formula_gam
{formula_gam}{}
{{formula_gam}}
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
document()
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)

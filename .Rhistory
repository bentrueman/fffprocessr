load_all()
data %>%
ggplot(aes(time, conc)) +
facet_wrap(vars(sample)) +
geom_line() +
geom_point(
data = function(x) x %>%
peak_maxima(peaks = 3, method = "sigma", n = 5),
col = "red"
)
rm(list = ls())
check()
use_r("peak_maxima")
tibble(a = 1, b = 2, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.x)))
tibble(a = 1, b = 2, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.)))
?any_vars
?filter_at
use_r("correct_baseline")
tibble(a = 1, b = 2, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = 1, b = NA, c = 3) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), any_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), all_vars(!is.na(.data)))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter_at(vars(c(a, b)), all_vars(!is.na(.)))
document()
check()
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(a, b))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), !is.na)
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), !is.na(.))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_any(c(a, b)), !is.na(.))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), !is.na(.))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), ~ !is.na(.x))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), ~ !is.na(.data))
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) %>% filter(if_all(c(a, b)), ~ !is.na(utils::globalVariables(".")))
document()
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4)
tibble(a = c(1, 2), b = c(NA, 3), c = 3:4) -> test
test
test[is.na(test$b, )]
test[is.na(test$b), ]
test[!is.na(test$b), ]
document()
document()
document()
check()
library(devtools)
document()
check*
check()
library(devtools)
use_r("load_icp")
?rename_at
?fill
document()
?load_all()
load_all()
?load_icp
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
document()
load_all()
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
load_all()
document()
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
document()
seq_len(0)
document()
check()
document()
document()
document()
load_all()
?load_icp
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
check()
document()
check()
document()
load_all()
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
check()
document()
library(devtools)
document()
check()
library(devtools)
document()
check()
dpcument()
document()
?load_icp
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
path <- system.file("extdata", package = "fffprocessr")
path
list.files(path)
list.files(path, full.names = TRUE)
x <- "/Users/cwrs/Documents/GitHub/fffprocessr/inst/extdata/2021-03-16_bennery_raw.csv"
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
) %>%
dplyr::mutate(
date = stringr::str_extract(file, date_regex) %>%
as.Date(date_format)
)
metadata <- 1
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
) %>%
dplyr::mutate(
date = stringr::str_extract(file, date_regex) %>%
as.Date(date_format)
)
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
)
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric)
data_format = "x-series II"
read_fun <- function(x) {
if(data_format == "x-series II") {
metadata <- 1
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
) %>%
dplyr::mutate(
date = stringr::str_extract(file, date_regex) %>%
as.Date(date_format)
)
} else if(data_format == "iCAP-RQ") {
readr::read_delim(x, delim = ";", skip = 1) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
dplyr::rename_at(
dplyr::vars(tidyselect::matches("^\\d")),
~ paste("cps", .x, sep = " ")
) %>%
tidyr::pivot_longer(
tidyselect::matches("^Time|^cps"),
names_to = c(".value", "param"),
names_sep = " "
) %>%
dplyr::mutate(
date = stringr::str_extract(file, date_regex) %>%
as.Date(date_format)
)
} else stop("Choose a valid data format ('x-series II' or 'iCAP-RQ')")
}
x %>%
rlang::set_names() %>%
purrr::map_dfr(read_fun, .id = "file")
read_fun <- function(x) {
if(data_format == "x-series II") {
metadata <- 1
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
) #%>%
#dplyr::mutate(
# date = stringr::str_extract(file, date_regex) %>%
#  as.Date(date_format)
#)
} else if(data_format == "iCAP-RQ") {
readr::read_delim(x, delim = ";", skip = 1) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
dplyr::rename_at(
dplyr::vars(tidyselect::matches("^\\d")),
~ paste("cps", .x, sep = " ")
) %>%
tidyr::pivot_longer(
tidyselect::matches("^Time|^cps"),
names_to = c(".value", "param"),
names_sep = " "
) %>%
dplyr::mutate(
date = stringr::str_extract(file, date_regex) %>%
as.Date(date_format)
)
} else stop("Choose a valid data format ('x-series II' or 'iCAP-RQ')")
}
x %>%
rlang::set_names() %>%
purrr::map_dfr(read_fun, .id = "file")
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
)
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
) %>%
mutate(time = as.numeric(.data$Time) / 6e4)
readr::read_csv(x, col_types = readr::cols(.default = readr::col_character())) %>%
# remove metadata after column names but before data:
dplyr::filter(!dplyr::row_number() %in% seq_len(metadata)) %>%
dplyr::mutate_at(dplyr::vars(tidyselect::matches("^\\d")), as.numeric) %>%
tidyr::pivot_longer(
cols = tidyselect::matches("^\\d"),
names_to = "param", values_to = "cps"
) %>%
dplyr::mutate(time = as.numeric(.data$Time) / 6e4)
3180 / 60
document()
path <- system.file("extdata", package = "fffprocessr")
load_icp(path = path)
check()
document()
check()
library(devtools)
document()
check()
document
document()
check()
install.packages("katex")
library("katex")
?math_to_rd
eqn1 <- "y = \frac{h\sigma}{\tau}\sqrt{\frac{\pi}{2}} exp\left(\frac{1}{2}(\frac{\sigma}{\tau})^2 - \frac{x-\mu}{\tau}\right)erfc\left(\frac{1}{\sqrt{2}}\left(\frac{\sigma}{\tau} - \frac{x-\mu}{\sigma}\right)\right)"
str_replace(eqn1)
library("tidyverse")
str_replace(eqn1)
str_replace(eqn1, "\\\")
str_replace(eqn1, "\", "\\")
str_replace(eqn1, "\", "a")
str_replace(eqn1, "\\\\", "a")
eqn1 <- "y = \frac{h\sigma}{\tau}\sqrt{\frac{\pi}{2}} exp\left(\frac{1}{2}(\frac{\sigma}{\tau})^2 - \frac{x-\mu}{\tau}\right)erfc\left(\frac{1}{\sqrt{2}}\left(\frac{\sigma}{\tau} - \frac{x-\mu}{\sigma}\right)\right)"
eqn1 <- "y = \\frac{h\\sigma}{\\tau}\\sqrt{\\frac{\\pi}{2}} exp\\left(\\frac{1}{2}(\\frac{\\sigma}{\\tau})^2 - \\frac{x-\\mu}{\\tau}\\right)erfc\\left(\\frac{1}{\\sqrt{2}}\\left(\\frac{\\sigma}{\\tau} - \\frac{x-\\mu}{\\sigma}\\right)\\right)"
katex::math_to_rd(eqn)
katex::math_to_rd(eqn1)
rmarkdown::render("README.Rmd", "md_document")
katex::katex_html(eqn1, preview = TRUE)
rmarkdown::render("README.Rmd", "md_document")
katex::katex_mathml(eqn1, preview = TRUE)
rmarkdown::render("README.Rmd", "md_document")
rmarkdown::render("README.Rmd", "md_document")
rmarkdown::render("README.Rmd", "md_document")
rmarkdown::render("README.Rmd", "md_document")
library(devtools)
use_r("combine_fff")
document()
check()
document()
?load_uv
path <- system.file("extdata", package = "fffprocessr")
load_uv(path = path, UV254_1, UV254_2, LS90)
document()
laod_icp
check()
?peak_maxima
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3)
path <- system.file("extdata", package = "fffprocessr")
data <- combine_fff(load_icp(path))
data <- data[data$param == "65Cu", ]
peak_maxima(data, peaks = 3, method = "sigma")
fffprocessr:::peak_id_sigma(data)
fffprocessr:::peak_id_gam(data)
fffprocessr:::peak_id_gam(data, y_var = "conc")
fffprocessr:::peak_id_gam(data, x_var = "conc", y_var = "conc")
fffprocessr:::peak_id_gam(data, x_var = "conc", y_var = "conc", k = 3)
fffprocessr:::peak_id_gam(data, x_var = "conc", y_var = "conc", k = 3, focus = 10)
fffprocessr:::peak_id_gam(data, x_var = "conc", y_var = "conc", k = 10, focus = 10)
fffprocessr:::peak_id_gam(data, x_var = "conc", y_var = "conc", k = 30, focus = 10)
fffprocessr:::peak_id_sigma(data)
fffprocessr:::peak_id_sigma(data, x_var = "time", y_var = "conc")
fffprocessr:::peak_id_sigma(data, x_var = "time", y_var = "conc", peaks = 3)
fffprocessr:::peak_id_sigma(data, x_var = "time", y_var = "conc", peaks = 3, max_iter = 10)
fffprocessr:::peak_id_sigma(data, x_var = "time", y_var = "conc", peaks = 3, max_iter = 10, focus = 10)
data
x_var = "time"
x_var
data %>% filter(is.na9(.data[[x_var]]))
data %>% filter(is.na(.data[[x_var]]))
tibble(time = c(NA, 0, 1, 2))
library(tidyverse)
tibble(time = c(NA, 0, 1, 2))
tibble(time = c(NA, 0, 1, 2)) %>% filter(is.na(.data[[x_var]]))
tibble(time = c(NA, 0, 1, 2)) %>% filter(!is.na(.data[[x_var]]))
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter(is.na(.data[[x_var]]))
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(x_var))
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(x_var), any_vars(is.na9))
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(x_var), any_vars(is.na(.)))
y_var
y_var = "tiome"
y_var = "time"
y_var
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(y_var), any_vars(is.na(.)))
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(all_of(y_var)), any_vars(is.na(.)))
y_var
x_var
y_var = "cpnc"
y_var = "conc"
x_var
y_var
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(all_of(x_var)), any_vars(is.na(.)))
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(all_of(y_var)), any_vars(is.na(.)))
tibble(time = c(NA, 0, 1, 2), conc = 1:4) %>% filter_at(vars(all_of(c(x_var, y_var))), any_vars(is.na(.)))
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>% filter_at(vars(all_of(c(x_var, y_var))), any_vars(is.na(.)))
?vars
?all_of
?all_vars
iris %>%
filter(if_any(ends_with("Width"), ~ . > 4))
iris %>%
filter(if_all(ends_with("Width"), ~ . > 4))
iris %>%
filter(if_all(ends_with("Width"), ~ . > .2))
iris %>%
filter(if_all(ends_with("Width"), ~ . > 4))
iris %>%
filter(if_any(ends_with("Width"), ~ . > 4))
?matches
x_var
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
dplyr::if_all(tidyselect::matches(tidyselect::all_of(c(x_var, y_var)))),
function(x) !is.na(x)
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
dplyr::if_all(tidyselect::matches(tidyselect::all_of(c(x_var, y_var)))),
.fn = function(x) !is.na(x)
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
.cols = dplyr::if_all(tidyselect::matches(tidyselect::all_of(c(x_var, y_var)))),
.fns = function(x) !is.na(x)
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
if_all(.cols = dplyr::if_all(tidyselect::matches(tidyselect::all_of(c(x_var, y_var)))),
.fns = function(x) !is.na(x))
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
dplyr::if_all(.cols = tidyselect::matches(tidyselect::all_of(c(x_var, y_var))),
.fns = function(x) !is.na(x))
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
dplyr::if_all(.cols = tidyselect::matches(tidyselect::all_of(c(x_var, y_var))),
.fns = function(x) !is.na(x))
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
dplyr::if_all(.cols = tidyselect::matches(tidyselect::all_of(c(x_var, y_var))),
.fns = function(x) !is.na(x))
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8))
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(
.cols = tidyselect::matches(tidyselect::all_of(c(x_var, y_var))),
.fns = function(x) !is.na(x))
)
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(if_all(
.cols = tidyselect::matches(tidyselect::all_of(c(x_var, y_var))),
.fns = function(x) !is.na(x))
))
tibble(time = c(NA, 0, 1, 2), conc = c(6, 7, NA, 8)) %>%
dplyr::filter(if_all(
.cols = tidyselect::matches(tidyselect::all_of(c(x_var, y_var))),
.fns = function(x) !is.na(x)
))
document()
check()
rmarkdown::render("README.Rmd", "md_document")
load_icp(path)
load_icp(path) %>% group_by(sample, date, param) %>% count()
load_uv(path, UV254_1) %>% group_by(sample, date, param) %>% count()
combine_fff(load_icp(path), load_uv(path, UV254_1)) %>% group_by(sample, date, param) %>% count()
combine_fff(load_icp(path), load_uv(path, UV254_1))
combine_fff(load_icp(path), load_uv(path, UV254_1)) %>% group_by(sample, date, param) %>% count()
combine_fff(load_icp(path), load_uv(path, UV254_1)) %>% group_by(sample, date, param) %>% count() %>% pull(n) %>% sum()
7711 * 2
?load_uv
icp_data <- load_icp(path)
uv_data <- load_uv(path, UV254_1, UV254_2, LS90)
test_that("combine_fff() yields same number of rows as load_...() fns", {
icp_data <- load_icp(path)
uv_data <- load_uv(path, UV254_1, UV254_2, LS90)
expect_equal(
nrow(combine_fff(icp_data, uv_data)), sum(nrow(icp_data), nrow(uv_data))
)
})
library("testthat")
test_that("combine_fff() yields same number of rows as load_...() fns", {
icp_data <- load_icp(path)
uv_data <- load_uv(path, UV254_1, UV254_2, LS90)
expect_equal(
nrow(combine_fff(icp_data, uv_data)), sum(nrow(icp_data), nrow(uv_data))
)
})
icp_data
uv_data
nrow(icp_data)
nrow(uv_data)
uv_data
combine_fff(icp_data, uv_data)
test_that("combine_fff() yields same number of rows as load_...() fns", {
icp_data <- load_icp(path)
uv_data <- load_uv(path, UV254_1, UV254_2, LS90)
expect_equal(
nrow(combine_fff(icp_data, uv_data)),
sum(
nrow(filter(icp_data, sample != "blank")),
nrow(filter(icp_data, sample != "blank"))
)
)
})
icp_data %>% group_by(sample, date, param) %>% count()
icp_data %>% filter(sample != "blank") %>% group_by(sample, date, param) %>% count()
uv_data %>% filter(sample != "blank") %>% group_by(sample, date, param) %>% count()
combine_fff(icp_data, uv_data) %>% filter(sample != "blank") %>% group_by(sample, date, param) %>% count()
combine_fff(icp_data, uv_data) %>% filter(sample != "blank") %>% group_by(sample, date, param) %>% count() %>% pull(n) %>% sum()
test_that("combine_fff() yields same number of rows as load_...() fns", {
icp_data <- load_icp(path)
uv_data <- load_uv(path, UV254_1, UV254_2, LS90)
expect_equal(
nrow(combine_fff(icp_data, uv_data)),
sum(
nrow(filter(icp_data, sample != "blank")),
nrow(filter(uv_data, sample != "blank"))
)
)
})
dplyr::summarize_if(
combine_fff(load_icp(path), load_uv(path, UV254_1, UV254_2, LS90)),
is.numeric, ~ round(mean(.x), 1)
)
test_that("combine_fff() yields expected column means", {
expect_equal(
dplyr::summarize_if(
combine_fff(load_icp(path), load_uv(path, UV254_1, UV254_2, LS90)),
is.numeric, ~ round(mean(.x), 1)
),
tibble::tibble(time = 19, conc = 1.1, three_sigma = .5)
)
})
library(testthat)
library(fffprocessr)
test_check("fffprocessr")
rmarkdown::render("README.Rmd", "md_document")
document()
check()
path <- system.file("extdata", package = "fffprocessr")
icp_data <- load_icp(path)
uv_data <- load_uv(path, UV254_1, UV254_2, LS90)
sum(
nrow(filter(icp_data, sample != "blank")),
nrow(filter(uv_data, sample != "blank"))
)
nrow(combine_fff(icp_data, uv_data))
test_that("combine_fff() yields same number of rows as load_...() fns", {
icp_data <- load_icp(path)
uv_data <- load_uv(path, UV254_1, UV254_2, LS90)
expect_equal(
nrow(combine_fff(icp_data, uv_data)),
sum(
nrow(filter(icp_data, sample != "blank")),
nrow(filter(uv_data, sample != "blank"))
)
)
})
?test()
test()
check()
check()
library("devtools")
use_r("load_icp")
document()
check()
